
medix_f302r8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003884  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001220  08003a0c  08003a0c  00004a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c2c  08004c2c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c2c  08004c2c  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c2c  08004c2c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c2c  08004c2c  00005c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c30  08004c30  00005c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c34  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  2000000c  08004c40  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08004c40  00006510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc4d  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d41  00000000  00000000  00012c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  000149d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ed  00000000  00000000  00015410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aba4  00000000  00000000  00015bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e641  00000000  00000000  000307a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d71f  00000000  00000000  0003ede2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc501  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a4  00000000  00000000  000dc544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000deee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080039f4 	.word	0x080039f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080039f4 	.word	0x080039f4

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char myText[] = "Hello Leroy";
 80001ce:	4a11      	ldr	r2, [pc, #68]	@ (8000214 <main+0x4c>)
 80001d0:	463b      	mov	r3, r7
 80001d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80001d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fca0 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f81e 	bl	800021c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8e2 	bl	80003a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001e4:	f000 f870 	bl	80002c8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80001e8:	f000 f8ae 	bl	8000348 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80001ec:	f000 fa98 	bl	8000720 <ssd1306_Init>
//  ssd1306_Fill(White);
//  ssd1306_UpdateScreen();
  ssd1306_SetCursor(5, 3);
 80001f0:	2103      	movs	r1, #3
 80001f2:	2005      	movs	r0, #5
 80001f4:	f000 fc48 	bl	8000a88 <ssd1306_SetCursor>

  retVal= ssd1306_WriteString(myText, Font_16x24, White);
 80001f8:	4b07      	ldr	r3, [pc, #28]	@ (8000218 <main+0x50>)
 80001fa:	4638      	mov	r0, r7
 80001fc:	2201      	movs	r2, #1
 80001fe:	9200      	str	r2, [sp, #0]
 8000200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000202:	f000 fc1b 	bl	8000a3c <ssd1306_WriteString>
 8000206:	4603      	mov	r3, r0
 8000208:	73fb      	strb	r3, [r7, #15]
  ssd1306_UpdateScreen();
 800020a:	f000 fb0b 	bl	8000824 <ssd1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020e:	bf00      	nop
 8000210:	e7fd      	b.n	800020e <main+0x46>
 8000212:	bf00      	nop
 8000214:	08003a0c 	.word	0x08003a0c
 8000218:	08004c00 	.word	0x08004c00

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b09c      	sub	sp, #112	@ 0x70
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000226:	2228      	movs	r2, #40	@ 0x28
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f003 fbb5 	bl	800399a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
 800023a:	609a      	str	r2, [r3, #8]
 800023c:	60da      	str	r2, [r3, #12]
 800023e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000240:	463b      	mov	r3, r7
 8000242:	2234      	movs	r2, #52	@ 0x34
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f003 fba7 	bl	800399a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024c:	2302      	movs	r3, #2
 800024e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000250:	2301      	movs	r3, #1
 8000252:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000254:	2310      	movs	r3, #16
 8000256:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000258:	2302      	movs	r3, #2
 800025a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800025c:	2300      	movs	r3, #0
 800025e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000260:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000264:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000266:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800026a:	4618      	mov	r0, r3
 800026c:	f001 fc06 	bl	8001a7c <HAL_RCC_OscConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000276:	f000 f8ff 	bl	8000478 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027a:	230f      	movs	r3, #15
 800027c:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027e:	2302      	movs	r3, #2
 8000280:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800028a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000290:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000294:	2102      	movs	r1, #2
 8000296:	4618      	mov	r0, r3
 8000298:	f002 fc2e 	bl	8002af8 <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002a2:	f000 f8e9 	bl	8000478 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002a6:	2320      	movs	r3, #32
 80002a8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ae:	463b      	mov	r3, r7
 80002b0:	4618      	mov	r0, r3
 80002b2:	f002 fe41 	bl	8002f38 <HAL_RCCEx_PeriphCLKConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80002bc:	f000 f8dc 	bl	8000478 <Error_Handler>
  }
}
 80002c0:	bf00      	nop
 80002c2:	3770      	adds	r7, #112	@ 0x70
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002cc:	4b1b      	ldr	r3, [pc, #108]	@ (800033c <MX_I2C1_Init+0x74>)
 80002ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000340 <MX_I2C1_Init+0x78>)
 80002d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002d2:	4b1a      	ldr	r3, [pc, #104]	@ (800033c <MX_I2C1_Init+0x74>)
 80002d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000344 <MX_I2C1_Init+0x7c>)
 80002d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002d8:	4b18      	ldr	r3, [pc, #96]	@ (800033c <MX_I2C1_Init+0x74>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002de:	4b17      	ldr	r3, [pc, #92]	@ (800033c <MX_I2C1_Init+0x74>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e4:	4b15      	ldr	r3, [pc, #84]	@ (800033c <MX_I2C1_Init+0x74>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002ea:	4b14      	ldr	r3, [pc, #80]	@ (800033c <MX_I2C1_Init+0x74>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002f0:	4b12      	ldr	r3, [pc, #72]	@ (800033c <MX_I2C1_Init+0x74>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f6:	4b11      	ldr	r3, [pc, #68]	@ (800033c <MX_I2C1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <MX_I2C1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000302:	480e      	ldr	r0, [pc, #56]	@ (800033c <MX_I2C1_Init+0x74>)
 8000304:	f000 ff04 	bl	8001110 <HAL_I2C_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800030e:	f000 f8b3 	bl	8000478 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000312:	2100      	movs	r1, #0
 8000314:	4809      	ldr	r0, [pc, #36]	@ (800033c <MX_I2C1_Init+0x74>)
 8000316:	f001 fb19 	bl	800194c <HAL_I2CEx_ConfigAnalogFilter>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000320:	f000 f8aa 	bl	8000478 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000324:	2100      	movs	r1, #0
 8000326:	4805      	ldr	r0, [pc, #20]	@ (800033c <MX_I2C1_Init+0x74>)
 8000328:	f001 fb5b 	bl	80019e2 <HAL_I2CEx_ConfigDigitalFilter>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000332:	f000 f8a1 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000028 	.word	0x20000028
 8000340:	40005400 	.word	0x40005400
 8000344:	2000090e 	.word	0x2000090e

08000348 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800034c:	4b14      	ldr	r3, [pc, #80]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 800034e:	4a15      	ldr	r2, [pc, #84]	@ (80003a4 <MX_USART2_UART_Init+0x5c>)
 8000350:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000352:	4b13      	ldr	r3, [pc, #76]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 8000354:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000358:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800035a:	4b11      	ldr	r3, [pc, #68]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000360:	4b0f      	ldr	r3, [pc, #60]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000366:	4b0e      	ldr	r3, [pc, #56]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800036c:	4b0c      	ldr	r3, [pc, #48]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 800036e:	220c      	movs	r2, #12
 8000370:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000372:	4b0b      	ldr	r3, [pc, #44]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000378:	4b09      	ldr	r3, [pc, #36]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800037e:	4b08      	ldr	r3, [pc, #32]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 8000380:	2200      	movs	r2, #0
 8000382:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000384:	4b06      	ldr	r3, [pc, #24]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 8000386:	2200      	movs	r2, #0
 8000388:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800038a:	4805      	ldr	r0, [pc, #20]	@ (80003a0 <MX_USART2_UART_Init+0x58>)
 800038c:	f002 ff66 	bl	800325c <HAL_UART_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000396:	f000 f86f 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	2000007c 	.word	0x2000007c
 80003a4:	40004400 	.word	0x40004400

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b08a      	sub	sp, #40	@ 0x28
 80003ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	f107 0314 	add.w	r3, r7, #20
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003be:	4b2b      	ldr	r3, [pc, #172]	@ (800046c <MX_GPIO_Init+0xc4>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a2a      	ldr	r2, [pc, #168]	@ (800046c <MX_GPIO_Init+0xc4>)
 80003c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	4b28      	ldr	r3, [pc, #160]	@ (800046c <MX_GPIO_Init+0xc4>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80003d2:	613b      	str	r3, [r7, #16]
 80003d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003d6:	4b25      	ldr	r3, [pc, #148]	@ (800046c <MX_GPIO_Init+0xc4>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a24      	ldr	r2, [pc, #144]	@ (800046c <MX_GPIO_Init+0xc4>)
 80003dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b22      	ldr	r3, [pc, #136]	@ (800046c <MX_GPIO_Init+0xc4>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ee:	4b1f      	ldr	r3, [pc, #124]	@ (800046c <MX_GPIO_Init+0xc4>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a1e      	ldr	r2, [pc, #120]	@ (800046c <MX_GPIO_Init+0xc4>)
 80003f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b1c      	ldr	r3, [pc, #112]	@ (800046c <MX_GPIO_Init+0xc4>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000406:	4b19      	ldr	r3, [pc, #100]	@ (800046c <MX_GPIO_Init+0xc4>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a18      	ldr	r2, [pc, #96]	@ (800046c <MX_GPIO_Init+0xc4>)
 800040c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b16      	ldr	r3, [pc, #88]	@ (800046c <MX_GPIO_Init+0xc4>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000424:	4812      	ldr	r0, [pc, #72]	@ (8000470 <MX_GPIO_Init+0xc8>)
 8000426:	f000 fe5b 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800042a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800042e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000430:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	2300      	movs	r3, #0
 8000438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800043a:	f107 0314 	add.w	r3, r7, #20
 800043e:	4619      	mov	r1, r3
 8000440:	480c      	ldr	r0, [pc, #48]	@ (8000474 <MX_GPIO_Init+0xcc>)
 8000442:	f000 fcdb 	bl	8000dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000446:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800044a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2300      	movs	r3, #0
 8000456:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	4619      	mov	r1, r3
 800045e:	4804      	ldr	r0, [pc, #16]	@ (8000470 <MX_GPIO_Init+0xc8>)
 8000460:	f000 fccc 	bl	8000dfc <HAL_GPIO_Init>

}
 8000464:	bf00      	nop
 8000466:	3728      	adds	r7, #40	@ 0x28
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40021000 	.word	0x40021000
 8000470:	48000400 	.word	0x48000400
 8000474:	48000800 	.word	0x48000800

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <Error_Handler+0x8>

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	@ (80004c8 <HAL_MspInit+0x44>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a0e      	ldr	r2, [pc, #56]	@ (80004c8 <HAL_MspInit+0x44>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6193      	str	r3, [r2, #24]
 8000496:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <HAL_MspInit+0x44>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <HAL_MspInit+0x44>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a08      	ldr	r2, [pc, #32]	@ (80004c8 <HAL_MspInit+0x44>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <HAL_MspInit+0x44>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004ba:	2007      	movs	r0, #7
 80004bc:	f000 fc6a 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000

080004cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	@ 0x28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a17      	ldr	r2, [pc, #92]	@ (8000548 <HAL_I2C_MspInit+0x7c>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d128      	bne.n	8000540 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b17      	ldr	r3, [pc, #92]	@ (800054c <HAL_I2C_MspInit+0x80>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a16      	ldr	r2, [pc, #88]	@ (800054c <HAL_I2C_MspInit+0x80>)
 80004f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b14      	ldr	r3, [pc, #80]	@ (800054c <HAL_I2C_MspInit+0x80>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000502:	613b      	str	r3, [r7, #16]
 8000504:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000506:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800050a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800050c:	2312      	movs	r3, #18
 800050e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000510:	2301      	movs	r3, #1
 8000512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000514:	2303      	movs	r3, #3
 8000516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000518:	2304      	movs	r3, #4
 800051a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	4619      	mov	r1, r3
 8000522:	480b      	ldr	r0, [pc, #44]	@ (8000550 <HAL_I2C_MspInit+0x84>)
 8000524:	f000 fc6a 	bl	8000dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000528:	4b08      	ldr	r3, [pc, #32]	@ (800054c <HAL_I2C_MspInit+0x80>)
 800052a:	69db      	ldr	r3, [r3, #28]
 800052c:	4a07      	ldr	r2, [pc, #28]	@ (800054c <HAL_I2C_MspInit+0x80>)
 800052e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000532:	61d3      	str	r3, [r2, #28]
 8000534:	4b05      	ldr	r3, [pc, #20]	@ (800054c <HAL_I2C_MspInit+0x80>)
 8000536:	69db      	ldr	r3, [r3, #28]
 8000538:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000540:	bf00      	nop
 8000542:	3728      	adds	r7, #40	@ 0x28
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40005400 	.word	0x40005400
 800054c:	40021000 	.word	0x40021000
 8000550:	48000400 	.word	0x48000400

08000554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	@ 0x28
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a17      	ldr	r2, [pc, #92]	@ (80005d0 <HAL_UART_MspInit+0x7c>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d128      	bne.n	80005c8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000576:	4b17      	ldr	r3, [pc, #92]	@ (80005d4 <HAL_UART_MspInit+0x80>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	4a16      	ldr	r2, [pc, #88]	@ (80005d4 <HAL_UART_MspInit+0x80>)
 800057c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000580:	61d3      	str	r3, [r2, #28]
 8000582:	4b14      	ldr	r3, [pc, #80]	@ (80005d4 <HAL_UART_MspInit+0x80>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <HAL_UART_MspInit+0x80>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a10      	ldr	r2, [pc, #64]	@ (80005d4 <HAL_UART_MspInit+0x80>)
 8000594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <HAL_UART_MspInit+0x80>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005a6:	230c      	movs	r3, #12
 80005a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005aa:	2302      	movs	r3, #2
 80005ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2300      	movs	r3, #0
 80005b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005b6:	2307      	movs	r3, #7
 80005b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c4:	f000 fc1a 	bl	8000dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005c8:	bf00      	nop
 80005ca:	3728      	adds	r7, #40	@ 0x28
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40004400 	.word	0x40004400
 80005d4:	40021000 	.word	0x40021000

080005d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <NMI_Handler+0x4>

080005e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <HardFault_Handler+0x4>

080005e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <MemManage_Handler+0x4>

080005f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <BusFault_Handler+0x4>

080005f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <UsageFault_Handler+0x4>

08000600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062e:	f000 fabb 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800063c:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <SystemInit+0x20>)
 800063e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000642:	4a05      	ldr	r2, [pc, #20]	@ (8000658 <SystemInit+0x20>)
 8000644:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000648:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800065c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000694 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000660:	f7ff ffea 	bl	8000638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480c      	ldr	r0, [pc, #48]	@ (8000698 <LoopForever+0x6>)
  ldr r1, =_edata
 8000666:	490d      	ldr	r1, [pc, #52]	@ (800069c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000668:	4a0d      	ldr	r2, [pc, #52]	@ (80006a0 <LoopForever+0xe>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a0a      	ldr	r2, [pc, #40]	@ (80006a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800067c:	4c0a      	ldr	r4, [pc, #40]	@ (80006a8 <LoopForever+0x16>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068a:	f003 f98f 	bl	80039ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800068e:	f7ff fd9b 	bl	80001c8 <main>

08000692 <LoopForever>:

LoopForever:
    b LoopForever
 8000692:	e7fe      	b.n	8000692 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000694:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800069c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006a0:	08004c34 	.word	0x08004c34
  ldr r2, =_sbss
 80006a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006a8:	20000510 	.word	0x20000510

080006ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <ADC1_IRQHandler>

080006ae <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af04      	add	r7, sp, #16
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006ca:	9302      	str	r3, [sp, #8]
 80006cc:	2301      	movs	r3, #1
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	2301      	movs	r3, #1
 80006d6:	2200      	movs	r2, #0
 80006d8:	2178      	movs	r1, #120	@ 0x78
 80006da:	4803      	ldr	r0, [pc, #12]	@ (80006e8 <ssd1306_WriteCommand+0x2c>)
 80006dc:	f000 fdb4 	bl	8001248 <HAL_I2C_Mem_Write>
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000028 	.word	0x20000028

080006ec <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af04      	add	r7, sp, #16
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80006fe:	9202      	str	r2, [sp, #8]
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2301      	movs	r3, #1
 8000708:	2240      	movs	r2, #64	@ 0x40
 800070a:	2178      	movs	r1, #120	@ 0x78
 800070c:	4803      	ldr	r0, [pc, #12]	@ (800071c <ssd1306_WriteData+0x30>)
 800070e:	f000 fd9b 	bl	8001248 <HAL_I2C_Mem_Write>
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000028 	.word	0x20000028

08000720 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000724:	f7ff ffc3 	bl	80006ae <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000728:	2064      	movs	r0, #100	@ 0x64
 800072a:	f000 fa5d 	bl	8000be8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f9d6 	bl	8000ae0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000734:	2020      	movs	r0, #32
 8000736:	f7ff ffc1 	bl	80006bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800073a:	2000      	movs	r0, #0
 800073c:	f7ff ffbe 	bl	80006bc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000740:	20b0      	movs	r0, #176	@ 0xb0
 8000742:	f7ff ffbb 	bl	80006bc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000746:	20c8      	movs	r0, #200	@ 0xc8
 8000748:	f7ff ffb8 	bl	80006bc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800074c:	2000      	movs	r0, #0
 800074e:	f7ff ffb5 	bl	80006bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000752:	2010      	movs	r0, #16
 8000754:	f7ff ffb2 	bl	80006bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000758:	2040      	movs	r0, #64	@ 0x40
 800075a:	f7ff ffaf 	bl	80006bc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800075e:	20ff      	movs	r0, #255	@ 0xff
 8000760:	f000 f9aa 	bl	8000ab8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000764:	20a1      	movs	r0, #161	@ 0xa1
 8000766:	f7ff ffa9 	bl	80006bc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800076a:	20a6      	movs	r0, #166	@ 0xa6
 800076c:	f7ff ffa6 	bl	80006bc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000770:	20a8      	movs	r0, #168	@ 0xa8
 8000772:	f7ff ffa3 	bl	80006bc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000776:	203f      	movs	r0, #63	@ 0x3f
 8000778:	f7ff ffa0 	bl	80006bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800077c:	20a4      	movs	r0, #164	@ 0xa4
 800077e:	f7ff ff9d 	bl	80006bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000782:	20d3      	movs	r0, #211	@ 0xd3
 8000784:	f7ff ff9a 	bl	80006bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000788:	2000      	movs	r0, #0
 800078a:	f7ff ff97 	bl	80006bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800078e:	20d5      	movs	r0, #213	@ 0xd5
 8000790:	f7ff ff94 	bl	80006bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000794:	20f0      	movs	r0, #240	@ 0xf0
 8000796:	f7ff ff91 	bl	80006bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800079a:	20d9      	movs	r0, #217	@ 0xd9
 800079c:	f7ff ff8e 	bl	80006bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80007a0:	2022      	movs	r0, #34	@ 0x22
 80007a2:	f7ff ff8b 	bl	80006bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80007a6:	20da      	movs	r0, #218	@ 0xda
 80007a8:	f7ff ff88 	bl	80006bc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80007ac:	2012      	movs	r0, #18
 80007ae:	f7ff ff85 	bl	80006bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80007b2:	20db      	movs	r0, #219	@ 0xdb
 80007b4:	f7ff ff82 	bl	80006bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80007b8:	2020      	movs	r0, #32
 80007ba:	f7ff ff7f 	bl	80006bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80007be:	208d      	movs	r0, #141	@ 0x8d
 80007c0:	f7ff ff7c 	bl	80006bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80007c4:	2014      	movs	r0, #20
 80007c6:	f7ff ff79 	bl	80006bc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80007ca:	2001      	movs	r0, #1
 80007cc:	f000 f988 	bl	8000ae0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 f80f 	bl	80007f4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80007d6:	f000 f825 	bl	8000824 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80007da:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <ssd1306_Init+0xd0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80007e0:	4b03      	ldr	r3, [pc, #12]	@ (80007f0 <ssd1306_Init+0xd0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80007e6:	4b02      	ldr	r3, [pc, #8]	@ (80007f0 <ssd1306_Init+0xd0>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	711a      	strb	r2, [r3, #4]
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000504 	.word	0x20000504

080007f4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <ssd1306_Fill+0x14>
 8000804:	2300      	movs	r3, #0
 8000806:	e000      	b.n	800080a <ssd1306_Fill+0x16>
 8000808:	23ff      	movs	r3, #255	@ 0xff
 800080a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800080e:	4619      	mov	r1, r3
 8000810:	4803      	ldr	r0, [pc, #12]	@ (8000820 <ssd1306_Fill+0x2c>)
 8000812:	f003 f8c2 	bl	800399a <memset>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000104 	.word	0x20000104

08000824 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800082a:	2300      	movs	r3, #0
 800082c:	71fb      	strb	r3, [r7, #7]
 800082e:	e016      	b.n	800085e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	3b50      	subs	r3, #80	@ 0x50
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff40 	bl	80006bc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff ff3d 	bl	80006bc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000842:	2010      	movs	r0, #16
 8000844:	f7ff ff3a 	bl	80006bc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	01db      	lsls	r3, r3, #7
 800084c:	4a08      	ldr	r2, [pc, #32]	@ (8000870 <ssd1306_UpdateScreen+0x4c>)
 800084e:	4413      	add	r3, r2
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ff4a 	bl	80006ec <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	3301      	adds	r3, #1
 800085c:	71fb      	strb	r3, [r7, #7]
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	2b07      	cmp	r3, #7
 8000862:	d9e5      	bls.n	8000830 <ssd1306_UpdateScreen+0xc>
    }
}
 8000864:	bf00      	nop
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000104 	.word	0x20000104

08000874 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
 800087e:	460b      	mov	r3, r1
 8000880:	71bb      	strb	r3, [r7, #6]
 8000882:	4613      	mov	r3, r2
 8000884:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	2b00      	cmp	r3, #0
 800088c:	db3d      	blt.n	800090a <ssd1306_DrawPixel+0x96>
 800088e:	79bb      	ldrb	r3, [r7, #6]
 8000890:	2b3f      	cmp	r3, #63	@ 0x3f
 8000892:	d83a      	bhi.n	800090a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000894:	797b      	ldrb	r3, [r7, #5]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d11a      	bne.n	80008d0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800089a:	79fa      	ldrb	r2, [r7, #7]
 800089c:	79bb      	ldrb	r3, [r7, #6]
 800089e:	08db      	lsrs	r3, r3, #3
 80008a0:	b2d8      	uxtb	r0, r3
 80008a2:	4603      	mov	r3, r0
 80008a4:	01db      	lsls	r3, r3, #7
 80008a6:	4413      	add	r3, r2
 80008a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000918 <ssd1306_DrawPixel+0xa4>)
 80008aa:	5cd3      	ldrb	r3, [r2, r3]
 80008ac:	b25a      	sxtb	r2, r3
 80008ae:	79bb      	ldrb	r3, [r7, #6]
 80008b0:	f003 0307 	and.w	r3, r3, #7
 80008b4:	2101      	movs	r1, #1
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	b259      	sxtb	r1, r3
 80008c0:	79fa      	ldrb	r2, [r7, #7]
 80008c2:	4603      	mov	r3, r0
 80008c4:	01db      	lsls	r3, r3, #7
 80008c6:	4413      	add	r3, r2
 80008c8:	b2c9      	uxtb	r1, r1
 80008ca:	4a13      	ldr	r2, [pc, #76]	@ (8000918 <ssd1306_DrawPixel+0xa4>)
 80008cc:	54d1      	strb	r1, [r2, r3]
 80008ce:	e01d      	b.n	800090c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80008d0:	79fa      	ldrb	r2, [r7, #7]
 80008d2:	79bb      	ldrb	r3, [r7, #6]
 80008d4:	08db      	lsrs	r3, r3, #3
 80008d6:	b2d8      	uxtb	r0, r3
 80008d8:	4603      	mov	r3, r0
 80008da:	01db      	lsls	r3, r3, #7
 80008dc:	4413      	add	r3, r2
 80008de:	4a0e      	ldr	r2, [pc, #56]	@ (8000918 <ssd1306_DrawPixel+0xa4>)
 80008e0:	5cd3      	ldrb	r3, [r2, r3]
 80008e2:	b25a      	sxtb	r2, r3
 80008e4:	79bb      	ldrb	r3, [r7, #6]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	2101      	movs	r1, #1
 80008ec:	fa01 f303 	lsl.w	r3, r1, r3
 80008f0:	b25b      	sxtb	r3, r3
 80008f2:	43db      	mvns	r3, r3
 80008f4:	b25b      	sxtb	r3, r3
 80008f6:	4013      	ands	r3, r2
 80008f8:	b259      	sxtb	r1, r3
 80008fa:	79fa      	ldrb	r2, [r7, #7]
 80008fc:	4603      	mov	r3, r0
 80008fe:	01db      	lsls	r3, r3, #7
 8000900:	4413      	add	r3, r2
 8000902:	b2c9      	uxtb	r1, r1
 8000904:	4a04      	ldr	r2, [pc, #16]	@ (8000918 <ssd1306_DrawPixel+0xa4>)
 8000906:	54d1      	strb	r1, [r2, r3]
 8000908:	e000      	b.n	800090c <ssd1306_DrawPixel+0x98>
        return;
 800090a:	bf00      	nop
    }
}
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000104 	.word	0x20000104

0800091c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b089      	sub	sp, #36	@ 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	4604      	mov	r4, r0
 8000924:	4638      	mov	r0, r7
 8000926:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800092a:	4623      	mov	r3, r4
 800092c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	2b1f      	cmp	r3, #31
 8000932:	d902      	bls.n	800093a <ssd1306_WriteChar+0x1e>
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	2b7e      	cmp	r3, #126	@ 0x7e
 8000938:	d901      	bls.n	800093e <ssd1306_WriteChar+0x22>
        return 0;
 800093a:	2300      	movs	r3, #0
 800093c:	e077      	b.n	8000a2e <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800093e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a38 <ssd1306_WriteChar+0x11c>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	783b      	ldrb	r3, [r7, #0]
 8000946:	4413      	add	r3, r2
 8000948:	2b80      	cmp	r3, #128	@ 0x80
 800094a:	dc06      	bgt.n	800095a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800094c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a38 <ssd1306_WriteChar+0x11c>)
 800094e:	885b      	ldrh	r3, [r3, #2]
 8000950:	461a      	mov	r2, r3
 8000952:	787b      	ldrb	r3, [r7, #1]
 8000954:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000956:	2b40      	cmp	r3, #64	@ 0x40
 8000958:	dd01      	ble.n	800095e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800095a:	2300      	movs	r3, #0
 800095c:	e067      	b.n	8000a2e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
 8000962:	e04e      	b.n	8000a02 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	3b20      	subs	r3, #32
 800096a:	7879      	ldrb	r1, [r7, #1]
 800096c:	fb01 f303 	mul.w	r3, r1, r3
 8000970:	4619      	mov	r1, r3
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	440b      	add	r3, r1
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	4413      	add	r3, r2
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
 8000982:	e036      	b.n	80009f2 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000990:	2b00      	cmp	r3, #0
 8000992:	d013      	beq.n	80009bc <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000994:	4b28      	ldr	r3, [pc, #160]	@ (8000a38 <ssd1306_WriteChar+0x11c>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	4413      	add	r3, r2
 80009a0:	b2d8      	uxtb	r0, r3
 80009a2:	4b25      	ldr	r3, [pc, #148]	@ (8000a38 <ssd1306_WriteChar+0x11c>)
 80009a4:	885b      	ldrh	r3, [r3, #2]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	4413      	add	r3, r2
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80009b4:	4619      	mov	r1, r3
 80009b6:	f7ff ff5d 	bl	8000874 <ssd1306_DrawPixel>
 80009ba:	e017      	b.n	80009ec <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80009bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a38 <ssd1306_WriteChar+0x11c>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	4413      	add	r3, r2
 80009c8:	b2d8      	uxtb	r0, r3
 80009ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <ssd1306_WriteChar+0x11c>)
 80009cc:	885b      	ldrh	r3, [r3, #2]
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	4413      	add	r3, r2
 80009d6:	b2d9      	uxtb	r1, r3
 80009d8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80009dc:	2b00      	cmp	r3, #0
 80009de:	bf0c      	ite	eq
 80009e0:	2301      	moveq	r3, #1
 80009e2:	2300      	movne	r3, #0
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	f7ff ff44 	bl	8000874 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	3301      	adds	r3, #1
 80009f0:	61bb      	str	r3, [r7, #24]
 80009f2:	783b      	ldrb	r3, [r7, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d3c3      	bcc.n	8000984 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	3301      	adds	r3, #1
 8000a00:	61fb      	str	r3, [r7, #28]
 8000a02:	787b      	ldrb	r3, [r7, #1]
 8000a04:	461a      	mov	r2, r3
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d3ab      	bcc.n	8000964 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <ssd1306_WriteChar+0x11c>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	2a00      	cmp	r2, #0
 8000a14:	d005      	beq.n	8000a22 <ssd1306_WriteChar+0x106>
 8000a16:	68b9      	ldr	r1, [r7, #8]
 8000a18:	7bfa      	ldrb	r2, [r7, #15]
 8000a1a:	3a20      	subs	r2, #32
 8000a1c:	440a      	add	r2, r1
 8000a1e:	7812      	ldrb	r2, [r2, #0]
 8000a20:	e000      	b.n	8000a24 <ssd1306_WriteChar+0x108>
 8000a22:	783a      	ldrb	r2, [r7, #0]
 8000a24:	4413      	add	r3, r2
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	4b03      	ldr	r3, [pc, #12]	@ (8000a38 <ssd1306_WriteChar+0x11c>)
 8000a2a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3724      	adds	r7, #36	@ 0x24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd90      	pop	{r4, r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000504 	.word	0x20000504

08000a3c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	4638      	mov	r0, r7
 8000a46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000a4a:	e013      	b.n	8000a74 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	7818      	ldrb	r0, [r3, #0]
 8000a50:	7e3b      	ldrb	r3, [r7, #24]
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	463b      	mov	r3, r7
 8000a56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a58:	f7ff ff60 	bl	800091c <ssd1306_WriteChar>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	461a      	mov	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d002      	beq.n	8000a6e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	e008      	b.n	8000a80 <ssd1306_WriteString+0x44>
        }
        str++;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	3301      	adds	r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1e7      	bne.n	8000a4c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	460a      	mov	r2, r1
 8000a92:	71fb      	strb	r3, [r7, #7]
 8000a94:	4613      	mov	r3, r2
 8000a96:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <ssd1306_SetCursor+0x2c>)
 8000a9e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000aa0:	79bb      	ldrb	r3, [r7, #6]
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	4b03      	ldr	r3, [pc, #12]	@ (8000ab4 <ssd1306_SetCursor+0x2c>)
 8000aa6:	805a      	strh	r2, [r3, #2]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	20000504 	.word	0x20000504

08000ab8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000ac2:	2381      	movs	r3, #129	@ 0x81
 8000ac4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fdf7 	bl	80006bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fdf3 	bl	80006bc <ssd1306_WriteCommand>
}
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d005      	beq.n	8000afc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000af0:	23af      	movs	r3, #175	@ 0xaf
 8000af2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000af4:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <ssd1306_SetDisplayOn+0x38>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	715a      	strb	r2, [r3, #5]
 8000afa:	e004      	b.n	8000b06 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000afc:	23ae      	movs	r3, #174	@ 0xae
 8000afe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000b00:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <ssd1306_SetDisplayOn+0x38>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fdd7 	bl	80006bc <ssd1306_WriteCommand>
}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000504 	.word	0x20000504

08000b1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b20:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <HAL_Init+0x28>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a07      	ldr	r2, [pc, #28]	@ (8000b44 <HAL_Init+0x28>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 f931 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 f808 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b38:	f7ff fca4 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40022000 	.word	0x40022000

08000b48 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <HAL_InitTick+0x54>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <HAL_InitTick+0x58>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f93b 	bl	8000de2 <HAL_SYSTICK_Config>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00e      	b.n	8000b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d80a      	bhi.n	8000b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b84:	f000 f911 	bl	8000daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b88:	4a06      	ldr	r2, [pc, #24]	@ (8000ba4 <HAL_InitTick+0x5c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	@ (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	2000050c 	.word	0x2000050c

08000bd0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bd4:	4b03      	ldr	r3, [pc, #12]	@ (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	2000050c 	.word	0x2000050c

08000be8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf0:	f7ff ffee 	bl	8000bd0 <HAL_GetTick>
 8000bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c00:	d005      	beq.n	8000c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <HAL_Delay+0x44>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c0e:	bf00      	nop
 8000c10:	f7ff ffde 	bl	8000bd0 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d8f7      	bhi.n	8000c10 <HAL_Delay+0x28>
  {
  }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	@ (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	@ (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	@ (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	@ 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
         );
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	@ 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d60:	d301      	bcc.n	8000d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00f      	b.n	8000d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <SysTick_Config+0x40>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6e:	210f      	movs	r1, #15
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d74:	f7ff ff8e 	bl	8000c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <SysTick_Config+0x40>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7e:	4b04      	ldr	r3, [pc, #16]	@ (8000d90 <SysTick_Config+0x40>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff47 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbc:	f7ff ff5c 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	6978      	ldr	r0, [r7, #20]
 8000dc8:	f7ff ff8e 	bl	8000ce8 <NVIC_EncodePriority>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff5d 	bl	8000c94 <__NVIC_SetPriority>
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ffb0 	bl	8000d50 <SysTick_Config>
 8000df0:	4603      	mov	r3, r0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e0a:	e14e      	b.n	80010aa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	2101      	movs	r1, #1
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 8140 	beq.w	80010a4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d005      	beq.n	8000e3c <HAL_GPIO_Init+0x40>
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d130      	bne.n	8000e9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e72:	2201      	movs	r2, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	091b      	lsrs	r3, r3, #4
 8000e88:	f003 0201 	and.w	r2, r3, #1
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d017      	beq.n	8000eda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d123      	bne.n	8000f2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	08da      	lsrs	r2, r3, #3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3208      	adds	r2, #8
 8000eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	220f      	movs	r2, #15
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	691a      	ldr	r2, [r3, #16]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	6939      	ldr	r1, [r7, #16]
 8000f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0203 	and.w	r2, r3, #3
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 809a 	beq.w	80010a4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f70:	4b55      	ldr	r3, [pc, #340]	@ (80010c8 <HAL_GPIO_Init+0x2cc>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a54      	ldr	r2, [pc, #336]	@ (80010c8 <HAL_GPIO_Init+0x2cc>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b52      	ldr	r3, [pc, #328]	@ (80010c8 <HAL_GPIO_Init+0x2cc>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f88:	4a50      	ldr	r2, [pc, #320]	@ (80010cc <HAL_GPIO_Init+0x2d0>)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fb2:	d013      	beq.n	8000fdc <HAL_GPIO_Init+0x1e0>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a46      	ldr	r2, [pc, #280]	@ (80010d0 <HAL_GPIO_Init+0x2d4>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d00d      	beq.n	8000fd8 <HAL_GPIO_Init+0x1dc>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a45      	ldr	r2, [pc, #276]	@ (80010d4 <HAL_GPIO_Init+0x2d8>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d007      	beq.n	8000fd4 <HAL_GPIO_Init+0x1d8>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a44      	ldr	r2, [pc, #272]	@ (80010d8 <HAL_GPIO_Init+0x2dc>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d101      	bne.n	8000fd0 <HAL_GPIO_Init+0x1d4>
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e006      	b.n	8000fde <HAL_GPIO_Init+0x1e2>
 8000fd0:	2305      	movs	r3, #5
 8000fd2:	e004      	b.n	8000fde <HAL_GPIO_Init+0x1e2>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e002      	b.n	8000fde <HAL_GPIO_Init+0x1e2>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e000      	b.n	8000fde <HAL_GPIO_Init+0x1e2>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	f002 0203 	and.w	r2, r2, #3
 8000fe4:	0092      	lsls	r2, r2, #2
 8000fe6:	4093      	lsls	r3, r2
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fee:	4937      	ldr	r1, [pc, #220]	@ (80010cc <HAL_GPIO_Init+0x2d0>)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	089b      	lsrs	r3, r3, #2
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ffc:	4b37      	ldr	r3, [pc, #220]	@ (80010dc <HAL_GPIO_Init+0x2e0>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001020:	4a2e      	ldr	r2, [pc, #184]	@ (80010dc <HAL_GPIO_Init+0x2e0>)
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001026:	4b2d      	ldr	r3, [pc, #180]	@ (80010dc <HAL_GPIO_Init+0x2e0>)
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800104a:	4a24      	ldr	r2, [pc, #144]	@ (80010dc <HAL_GPIO_Init+0x2e0>)
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001050:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <HAL_GPIO_Init+0x2e0>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	43db      	mvns	r3, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001074:	4a19      	ldr	r2, [pc, #100]	@ (80010dc <HAL_GPIO_Init+0x2e0>)
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800107a:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <HAL_GPIO_Init+0x2e0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800109e:	4a0f      	ldr	r2, [pc, #60]	@ (80010dc <HAL_GPIO_Init+0x2e0>)
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	3301      	adds	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	fa22 f303 	lsr.w	r3, r2, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f47f aea9 	bne.w	8000e0c <HAL_GPIO_Init+0x10>
  }
}
 80010ba:	bf00      	nop
 80010bc:	bf00      	nop
 80010be:	371c      	adds	r7, #28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40010000 	.word	0x40010000
 80010d0:	48000400 	.word	0x48000400
 80010d4:	48000800 	.word	0x48000800
 80010d8:	48000c00 	.word	0x48000c00
 80010dc:	40010400 	.word	0x40010400

080010e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
 80010ec:	4613      	mov	r3, r2
 80010ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010f0:	787b      	ldrb	r3, [r7, #1]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010f6:	887a      	ldrh	r2, [r7, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010fc:	e002      	b.n	8001104 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010fe:	887a      	ldrh	r2, [r7, #2]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e08d      	b.n	800123e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d106      	bne.n	800113c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff f9c8 	bl	80004cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2224      	movs	r2, #36	@ 0x24
 8001140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0201 	bic.w	r2, r2, #1
 8001152:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001160:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001170:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d107      	bne.n	800118a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	e006      	b.n	8001198 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001196:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	2b02      	cmp	r3, #2
 800119e:	d108      	bne.n	80011b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	e007      	b.n	80011c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	6812      	ldr	r2, [r2, #0]
 80011cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691a      	ldr	r2, [r3, #16]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69d9      	ldr	r1, [r3, #28]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a1a      	ldr	r2, [r3, #32]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0201 	orr.w	r2, r2, #1
 800121e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2220      	movs	r2, #32
 800122a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af02      	add	r7, sp, #8
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	4608      	mov	r0, r1
 8001252:	4611      	mov	r1, r2
 8001254:	461a      	mov	r2, r3
 8001256:	4603      	mov	r3, r0
 8001258:	817b      	strh	r3, [r7, #10]
 800125a:	460b      	mov	r3, r1
 800125c:	813b      	strh	r3, [r7, #8]
 800125e:	4613      	mov	r3, r2
 8001260:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b20      	cmp	r3, #32
 800126c:	f040 80f9 	bne.w	8001462 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <HAL_I2C_Mem_Write+0x34>
 8001276:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001278:	2b00      	cmp	r3, #0
 800127a:	d105      	bne.n	8001288 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001282:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e0ed      	b.n	8001464 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800128e:	2b01      	cmp	r3, #1
 8001290:	d101      	bne.n	8001296 <HAL_I2C_Mem_Write+0x4e>
 8001292:	2302      	movs	r3, #2
 8001294:	e0e6      	b.n	8001464 <HAL_I2C_Mem_Write+0x21c>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800129e:	f7ff fc97 	bl	8000bd0 <HAL_GetTick>
 80012a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2319      	movs	r3, #25
 80012aa:	2201      	movs	r2, #1
 80012ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f000 f955 	bl	8001560 <I2C_WaitOnFlagUntilTimeout>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e0d1      	b.n	8001464 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2221      	movs	r2, #33	@ 0x21
 80012c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2240      	movs	r2, #64	@ 0x40
 80012cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2200      	movs	r2, #0
 80012d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6a3a      	ldr	r2, [r7, #32]
 80012da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80012e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80012e8:	88f8      	ldrh	r0, [r7, #6]
 80012ea:	893a      	ldrh	r2, [r7, #8]
 80012ec:	8979      	ldrh	r1, [r7, #10]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	4603      	mov	r3, r0
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f000 f8b9 	bl	8001470 <I2C_RequestMemoryWrite>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e0a9      	b.n	8001464 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001314:	b29b      	uxth	r3, r3
 8001316:	2bff      	cmp	r3, #255	@ 0xff
 8001318:	d90e      	bls.n	8001338 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	22ff      	movs	r2, #255	@ 0xff
 800131e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001324:	b2da      	uxtb	r2, r3
 8001326:	8979      	ldrh	r1, [r7, #10]
 8001328:	2300      	movs	r3, #0
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f000 fad9 	bl	80018e8 <I2C_TransferConfig>
 8001336:	e00f      	b.n	8001358 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800133c:	b29a      	uxth	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001346:	b2da      	uxtb	r2, r3
 8001348:	8979      	ldrh	r1, [r7, #10]
 800134a:	2300      	movs	r3, #0
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f000 fac8 	bl	80018e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f000 f958 	bl	8001612 <I2C_WaitOnTXISFlagUntilTimeout>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e07b      	b.n	8001464 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001370:	781a      	ldrb	r2, [r3, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001386:	b29b      	uxth	r3, r3
 8001388:	3b01      	subs	r3, #1
 800138a:	b29a      	uxth	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001394:	3b01      	subs	r3, #1
 8001396:	b29a      	uxth	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d034      	beq.n	8001410 <HAL_I2C_Mem_Write+0x1c8>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d130      	bne.n	8001410 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013b4:	2200      	movs	r2, #0
 80013b6:	2180      	movs	r1, #128	@ 0x80
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f000 f8d1 	bl	8001560 <I2C_WaitOnFlagUntilTimeout>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e04d      	b.n	8001464 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	2bff      	cmp	r3, #255	@ 0xff
 80013d0:	d90e      	bls.n	80013f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	22ff      	movs	r2, #255	@ 0xff
 80013d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	8979      	ldrh	r1, [r7, #10]
 80013e0:	2300      	movs	r3, #0
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f000 fa7d 	bl	80018e8 <I2C_TransferConfig>
 80013ee:	e00f      	b.n	8001410 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	8979      	ldrh	r1, [r7, #10]
 8001402:	2300      	movs	r3, #0
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f000 fa6c 	bl	80018e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001414:	b29b      	uxth	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d19e      	bne.n	8001358 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f000 f93e 	bl	80016a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e01a      	b.n	8001464 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2220      	movs	r2, #32
 8001434:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <HAL_I2C_Mem_Write+0x224>)
 8001442:	400b      	ands	r3, r1
 8001444:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2220      	movs	r2, #32
 800144a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001462:	2302      	movs	r3, #2
  }
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	fe00e800 	.word	0xfe00e800

08001470 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af02      	add	r7, sp, #8
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	4608      	mov	r0, r1
 800147a:	4611      	mov	r1, r2
 800147c:	461a      	mov	r2, r3
 800147e:	4603      	mov	r3, r0
 8001480:	817b      	strh	r3, [r7, #10]
 8001482:	460b      	mov	r3, r1
 8001484:	813b      	strh	r3, [r7, #8]
 8001486:	4613      	mov	r3, r2
 8001488:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	8979      	ldrh	r1, [r7, #10]
 8001490:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <I2C_RequestMemoryWrite+0xa4>)
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f000 fa25 	bl	80018e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800149e:	69fa      	ldr	r2, [r7, #28]
 80014a0:	69b9      	ldr	r1, [r7, #24]
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f000 f8b5 	bl	8001612 <I2C_WaitOnTXISFlagUntilTimeout>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e02c      	b.n	800150c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d105      	bne.n	80014c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014b8:	893b      	ldrh	r3, [r7, #8]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80014c2:	e015      	b.n	80014f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80014c4:	893b      	ldrh	r3, [r7, #8]
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014d2:	69fa      	ldr	r2, [r7, #28]
 80014d4:	69b9      	ldr	r1, [r7, #24]
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 f89b 	bl	8001612 <I2C_WaitOnTXISFlagUntilTimeout>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e012      	b.n	800150c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014e6:	893b      	ldrh	r3, [r7, #8]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2200      	movs	r2, #0
 80014f8:	2180      	movs	r1, #128	@ 0x80
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 f830 	bl	8001560 <I2C_WaitOnFlagUntilTimeout>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	80002000 	.word	0x80002000

08001518 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b02      	cmp	r3, #2
 800152c:	d103      	bne.n	8001536 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2200      	movs	r2, #0
 8001534:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b01      	cmp	r3, #1
 8001542:	d007      	beq.n	8001554 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0201 	orr.w	r2, r2, #1
 8001552:	619a      	str	r2, [r3, #24]
  }
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	4613      	mov	r3, r2
 800156e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001570:	e03b      	b.n	80015ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	6839      	ldr	r1, [r7, #0]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 f8d6 	bl	8001728 <I2C_IsErrorOccurred>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e041      	b.n	800160a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800158c:	d02d      	beq.n	80015ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800158e:	f7ff fb1f 	bl	8000bd0 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d302      	bcc.n	80015a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d122      	bne.n	80015ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699a      	ldr	r2, [r3, #24]
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	4013      	ands	r3, r2
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	bf0c      	ite	eq
 80015b4:	2301      	moveq	r3, #1
 80015b6:	2300      	movne	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d113      	bne.n	80015ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c6:	f043 0220 	orr.w	r2, r3, #32
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2220      	movs	r2, #32
 80015d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	699a      	ldr	r2, [r3, #24]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4013      	ands	r3, r2
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	bf0c      	ite	eq
 80015fa:	2301      	moveq	r3, #1
 80015fc:	2300      	movne	r3, #0
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	429a      	cmp	r2, r3
 8001606:	d0b4      	beq.n	8001572 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b084      	sub	sp, #16
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800161e:	e033      	b.n	8001688 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	68b9      	ldr	r1, [r7, #8]
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f000 f87f 	bl	8001728 <I2C_IsErrorOccurred>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e031      	b.n	8001698 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800163a:	d025      	beq.n	8001688 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800163c:	f7ff fac8 	bl	8000bd0 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	429a      	cmp	r2, r3
 800164a:	d302      	bcc.n	8001652 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d11a      	bne.n	8001688 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b02      	cmp	r3, #2
 800165e:	d013      	beq.n	8001688 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001664:	f043 0220 	orr.w	r2, r3, #32
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2220      	movs	r2, #32
 8001670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e007      	b.n	8001698 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b02      	cmp	r3, #2
 8001694:	d1c4      	bne.n	8001620 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016ac:	e02f      	b.n	800170e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f000 f838 	bl	8001728 <I2C_IsErrorOccurred>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e02d      	b.n	800171e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016c2:	f7ff fa85 	bl	8000bd0 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d302      	bcc.n	80016d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d11a      	bne.n	800170e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f003 0320 	and.w	r3, r3, #32
 80016e2:	2b20      	cmp	r3, #32
 80016e4:	d013      	beq.n	800170e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ea:	f043 0220 	orr.w	r2, r3, #32
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2220      	movs	r2, #32
 80016f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e007      	b.n	800171e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0320 	and.w	r3, r3, #32
 8001718:	2b20      	cmp	r3, #32
 800171a:	d1c8      	bne.n	80016ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	@ 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	f003 0310 	and.w	r3, r3, #16
 8001750:	2b00      	cmp	r3, #0
 8001752:	d068      	beq.n	8001826 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2210      	movs	r2, #16
 800175a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800175c:	e049      	b.n	80017f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001764:	d045      	beq.n	80017f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001766:	f7ff fa33 	bl	8000bd0 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	429a      	cmp	r2, r3
 8001774:	d302      	bcc.n	800177c <I2C_IsErrorOccurred+0x54>
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d13a      	bne.n	80017f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001786:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800178e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800179a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800179e:	d121      	bne.n	80017e4 <I2C_IsErrorOccurred+0xbc>
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017a6:	d01d      	beq.n	80017e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80017a8:	7cfb      	ldrb	r3, [r7, #19]
 80017aa:	2b20      	cmp	r3, #32
 80017ac:	d01a      	beq.n	80017e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80017bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80017be:	f7ff fa07 	bl	8000bd0 <HAL_GetTick>
 80017c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017c4:	e00e      	b.n	80017e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80017c6:	f7ff fa03 	bl	8000bd0 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b19      	cmp	r3, #25
 80017d2:	d907      	bls.n	80017e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	f043 0320 	orr.w	r3, r3, #32
 80017da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80017e2:	e006      	b.n	80017f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	f003 0320 	and.w	r3, r3, #32
 80017ee:	2b20      	cmp	r3, #32
 80017f0:	d1e9      	bne.n	80017c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0320 	and.w	r3, r3, #32
 80017fc:	2b20      	cmp	r3, #32
 80017fe:	d003      	beq.n	8001808 <I2C_IsErrorOccurred+0xe0>
 8001800:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0aa      	beq.n	800175e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001808:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800180c:	2b00      	cmp	r3, #0
 800180e:	d103      	bne.n	8001818 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2220      	movs	r2, #32
 8001816:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001818:	6a3b      	ldr	r3, [r7, #32]
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00b      	beq.n	8001850 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001848:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00b      	beq.n	8001872 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800186a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00b      	beq.n	8001894 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	f043 0302 	orr.w	r3, r3, #2
 8001882:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800188c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001894:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01c      	beq.n	80018d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f7ff fe3b 	bl	8001518 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6859      	ldr	r1, [r3, #4]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b0d      	ldr	r3, [pc, #52]	@ (80018e4 <I2C_IsErrorOccurred+0x1bc>)
 80018ae:	400b      	ands	r3, r1
 80018b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2220      	movs	r2, #32
 80018c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80018d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3728      	adds	r7, #40	@ 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	fe00e800 	.word	0xfe00e800

080018e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	460b      	mov	r3, r1
 80018f4:	817b      	strh	r3, [r7, #10]
 80018f6:	4613      	mov	r3, r2
 80018f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018fa:	897b      	ldrh	r3, [r7, #10]
 80018fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001900:	7a7b      	ldrb	r3, [r7, #9]
 8001902:	041b      	lsls	r3, r3, #16
 8001904:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001908:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	4313      	orrs	r3, r2
 8001912:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001916:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	0d5b      	lsrs	r3, r3, #21
 8001922:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001926:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <I2C_TransferConfig+0x60>)
 8001928:	430b      	orrs	r3, r1
 800192a:	43db      	mvns	r3, r3
 800192c:	ea02 0103 	and.w	r1, r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	430a      	orrs	r2, r1
 8001938:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800193a:	bf00      	nop
 800193c:	371c      	adds	r7, #28
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	03ff63ff 	.word	0x03ff63ff

0800194c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b20      	cmp	r3, #32
 8001960:	d138      	bne.n	80019d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001968:	2b01      	cmp	r3, #1
 800196a:	d101      	bne.n	8001970 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800196c:	2302      	movs	r3, #2
 800196e:	e032      	b.n	80019d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2224      	movs	r2, #36	@ 0x24
 800197c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0201 	bic.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800199e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6819      	ldr	r1, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0201 	orr.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2220      	movs	r2, #32
 80019c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e000      	b.n	80019d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019d4:	2302      	movs	r3, #2
  }
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b085      	sub	sp, #20
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b20      	cmp	r3, #32
 80019f6:	d139      	bne.n	8001a6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e033      	b.n	8001a6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2224      	movs	r2, #36	@ 0x24
 8001a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0201 	bic.w	r2, r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e000      	b.n	8001a6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a6c:	2302      	movs	r3, #2
  }
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a8c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d102      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f001 b823 	b.w	8002ae8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 817d 	beq.w	8001db2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ab8:	4bbc      	ldr	r3, [pc, #752]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d00c      	beq.n	8001ade <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ac4:	4bb9      	ldr	r3, [pc, #740]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d15c      	bne.n	8001b8a <HAL_RCC_OscConfig+0x10e>
 8001ad0:	4bb6      	ldr	r3, [pc, #728]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001adc:	d155      	bne.n	8001b8a <HAL_RCC_OscConfig+0x10e>
 8001ade:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ae2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001af2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	095b      	lsrs	r3, r3, #5
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d102      	bne.n	8001b10 <HAL_RCC_OscConfig+0x94>
 8001b0a:	4ba8      	ldr	r3, [pc, #672]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	e015      	b.n	8001b3c <HAL_RCC_OscConfig+0xc0>
 8001b10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b14:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b18:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001b1c:	fa93 f3a3 	rbit	r3, r3
 8001b20:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001b24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b28:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001b2c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001b38:	4b9c      	ldr	r3, [pc, #624]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b40:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001b44:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001b48:	fa92 f2a2 	rbit	r2, r2
 8001b4c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001b50:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001b54:	fab2 f282 	clz	r2, r2
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	f042 0220 	orr.w	r2, r2, #32
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	f002 021f 	and.w	r2, r2, #31
 8001b64:	2101      	movs	r1, #1
 8001b66:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 811f 	beq.w	8001db0 <HAL_RCC_OscConfig+0x334>
 8001b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f040 8116 	bne.w	8001db0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f000 bfaf 	b.w	8002ae8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b9a:	d106      	bne.n	8001baa <HAL_RCC_OscConfig+0x12e>
 8001b9c:	4b83      	ldr	r3, [pc, #524]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a82      	ldr	r2, [pc, #520]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001ba2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	e036      	b.n	8001c18 <HAL_RCC_OscConfig+0x19c>
 8001baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x158>
 8001bba:	4b7c      	ldr	r3, [pc, #496]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a7b      	ldr	r2, [pc, #492]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001bc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b79      	ldr	r3, [pc, #484]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a78      	ldr	r2, [pc, #480]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001bcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e021      	b.n	8001c18 <HAL_RCC_OscConfig+0x19c>
 8001bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x184>
 8001be6:	4b71      	ldr	r3, [pc, #452]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a70      	ldr	r2, [pc, #448]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001bec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4b6e      	ldr	r3, [pc, #440]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a6d      	ldr	r2, [pc, #436]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e00b      	b.n	8001c18 <HAL_RCC_OscConfig+0x19c>
 8001c00:	4b6a      	ldr	r3, [pc, #424]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a69      	ldr	r2, [pc, #420]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001c06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b67      	ldr	r3, [pc, #412]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a66      	ldr	r2, [pc, #408]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001c12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c16:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c18:	4b64      	ldr	r3, [pc, #400]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1c:	f023 020f 	bic.w	r2, r3, #15
 8001c20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	495f      	ldr	r1, [pc, #380]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d059      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7fe ffc5 	bl	8000bd0 <HAL_GetTick>
 8001c46:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	e00a      	b.n	8001c62 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7fe ffc0 	bl	8000bd0 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b64      	cmp	r3, #100	@ 0x64
 8001c5a:	d902      	bls.n	8001c62 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	f000 bf43 	b.w	8002ae8 <HAL_RCC_OscConfig+0x106c>
 8001c62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c66:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001c76:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	095b      	lsrs	r3, r3, #5
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d102      	bne.n	8001c94 <HAL_RCC_OscConfig+0x218>
 8001c8e:	4b47      	ldr	r3, [pc, #284]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	e015      	b.n	8001cc0 <HAL_RCC_OscConfig+0x244>
 8001c94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c98:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001ca8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cac:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001cb0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cc4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001cc8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001ccc:	fa92 f2a2 	rbit	r2, r2
 8001cd0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001cd4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001cd8:	fab2 f282 	clz	r2, r2
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	f042 0220 	orr.w	r2, r2, #32
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	f002 021f 	and.w	r2, r2, #31
 8001ce8:	2101      	movs	r1, #1
 8001cea:	fa01 f202 	lsl.w	r2, r1, r2
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0ab      	beq.n	8001c4c <HAL_RCC_OscConfig+0x1d0>
 8001cf4:	e05d      	b.n	8001db2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7fe ff6b 	bl	8000bd0 <HAL_GetTick>
 8001cfa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d00:	f7fe ff66 	bl	8000bd0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b64      	cmp	r3, #100	@ 0x64
 8001d0e:	d902      	bls.n	8001d16 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	f000 bee9 	b.w	8002ae8 <HAL_RCC_OscConfig+0x106c>
 8001d16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d1a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001d2a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	fab3 f383 	clz	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	095b      	lsrs	r3, r3, #5
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d102      	bne.n	8001d48 <HAL_RCC_OscConfig+0x2cc>
 8001d42:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	e015      	b.n	8001d74 <HAL_RCC_OscConfig+0x2f8>
 8001d48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d4c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001d5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d60:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001d64:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001d70:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <HAL_RCC_OscConfig+0x330>)
 8001d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d74:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d78:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001d7c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001d80:	fa92 f2a2 	rbit	r2, r2
 8001d84:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001d88:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001d8c:	fab2 f282 	clz	r2, r2
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	f042 0220 	orr.w	r2, r2, #32
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	f002 021f 	and.w	r2, r2, #31
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1ab      	bne.n	8001d00 <HAL_RCC_OscConfig+0x284>
 8001da8:	e003      	b.n	8001db2 <HAL_RCC_OscConfig+0x336>
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 817d 	beq.w	80020c2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dc8:	4ba6      	ldr	r3, [pc, #664]	@ (8002064 <HAL_RCC_OscConfig+0x5e8>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00b      	beq.n	8001dec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dd4:	4ba3      	ldr	r3, [pc, #652]	@ (8002064 <HAL_RCC_OscConfig+0x5e8>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d172      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x44a>
 8001de0:	4ba0      	ldr	r3, [pc, #640]	@ (8002064 <HAL_RCC_OscConfig+0x5e8>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d16c      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x44a>
 8001dec:	2302      	movs	r3, #2
 8001dee:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001dfe:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	095b      	lsrs	r3, r3, #5
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d102      	bne.n	8001e1c <HAL_RCC_OscConfig+0x3a0>
 8001e16:	4b93      	ldr	r3, [pc, #588]	@ (8002064 <HAL_RCC_OscConfig+0x5e8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	e013      	b.n	8001e44 <HAL_RCC_OscConfig+0x3c8>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001e2e:	2302      	movs	r3, #2
 8001e30:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001e34:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001e40:	4b88      	ldr	r3, [pc, #544]	@ (8002064 <HAL_RCC_OscConfig+0x5e8>)
 8001e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e44:	2202      	movs	r2, #2
 8001e46:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001e4a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001e4e:	fa92 f2a2 	rbit	r2, r2
 8001e52:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001e56:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001e5a:	fab2 f282 	clz	r2, r2
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	f042 0220 	orr.w	r2, r2, #32
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	f002 021f 	and.w	r2, r2, #31
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00a      	beq.n	8001e8c <HAL_RCC_OscConfig+0x410>
 8001e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d002      	beq.n	8001e8c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	f000 be2e 	b.w	8002ae8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8c:	4b75      	ldr	r3, [pc, #468]	@ (8002064 <HAL_RCC_OscConfig+0x5e8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	21f8      	movs	r1, #248	@ 0xf8
 8001ea2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001eaa:	fa91 f1a1 	rbit	r1, r1
 8001eae:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001eb2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001eb6:	fab1 f181 	clz	r1, r1
 8001eba:	b2c9      	uxtb	r1, r1
 8001ebc:	408b      	lsls	r3, r1
 8001ebe:	4969      	ldr	r1, [pc, #420]	@ (8002064 <HAL_RCC_OscConfig+0x5e8>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec4:	e0fd      	b.n	80020c2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8088 	beq.w	8001fe8 <HAL_RCC_OscConfig+0x56c>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001eea:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ef8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	461a      	mov	r2, r3
 8001f00:	2301      	movs	r3, #1
 8001f02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7fe fe64 	bl	8000bd0 <HAL_GetTick>
 8001f08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0e:	f7fe fe5f 	bl	8000bd0 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d902      	bls.n	8001f24 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	f000 bde2 	b.w	8002ae8 <HAL_RCC_OscConfig+0x106c>
 8001f24:	2302      	movs	r3, #2
 8001f26:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001f36:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d102      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4d8>
 8001f4e:	4b45      	ldr	r3, [pc, #276]	@ (8002064 <HAL_RCC_OscConfig+0x5e8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	e013      	b.n	8001f7c <HAL_RCC_OscConfig+0x500>
 8001f54:	2302      	movs	r3, #2
 8001f56:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001f66:	2302      	movs	r3, #2
 8001f68:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001f6c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001f70:	fa93 f3a3 	rbit	r3, r3
 8001f74:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001f78:	4b3a      	ldr	r3, [pc, #232]	@ (8002064 <HAL_RCC_OscConfig+0x5e8>)
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001f82:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001f86:	fa92 f2a2 	rbit	r2, r2
 8001f8a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001f8e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001f92:	fab2 f282 	clz	r2, r2
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	f042 0220 	orr.w	r2, r2, #32
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	f002 021f 	and.w	r2, r2, #31
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0af      	beq.n	8001f0e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fae:	4b2d      	ldr	r3, [pc, #180]	@ (8002064 <HAL_RCC_OscConfig+0x5e8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	21f8      	movs	r1, #248	@ 0xf8
 8001fc4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001fcc:	fa91 f1a1 	rbit	r1, r1
 8001fd0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001fd4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001fd8:	fab1 f181 	clz	r1, r1
 8001fdc:	b2c9      	uxtb	r1, r1
 8001fde:	408b      	lsls	r3, r1
 8001fe0:	4920      	ldr	r1, [pc, #128]	@ (8002064 <HAL_RCC_OscConfig+0x5e8>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
 8001fe6:	e06c      	b.n	80020c2 <HAL_RCC_OscConfig+0x646>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001ffa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002008:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	461a      	mov	r2, r3
 8002010:	2300      	movs	r3, #0
 8002012:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7fe fddc 	bl	8000bd0 <HAL_GetTick>
 8002018:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201e:	f7fe fdd7 	bl	8000bd0 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d902      	bls.n	8002034 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	f000 bd5a 	b.w	8002ae8 <HAL_RCC_OscConfig+0x106c>
 8002034:	2302      	movs	r3, #2
 8002036:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002046:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	095b      	lsrs	r3, r3, #5
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b01      	cmp	r3, #1
 800205c:	d104      	bne.n	8002068 <HAL_RCC_OscConfig+0x5ec>
 800205e:	4b01      	ldr	r3, [pc, #4]	@ (8002064 <HAL_RCC_OscConfig+0x5e8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	e015      	b.n	8002090 <HAL_RCC_OscConfig+0x614>
 8002064:	40021000 	.word	0x40021000
 8002068:	2302      	movs	r3, #2
 800206a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800207a:	2302      	movs	r3, #2
 800207c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002080:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002084:	fa93 f3a3 	rbit	r3, r3
 8002088:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800208c:	4bc8      	ldr	r3, [pc, #800]	@ (80023b0 <HAL_RCC_OscConfig+0x934>)
 800208e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002090:	2202      	movs	r2, #2
 8002092:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002096:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800209a:	fa92 f2a2 	rbit	r2, r2
 800209e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80020a2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80020a6:	fab2 f282 	clz	r2, r2
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	f042 0220 	orr.w	r2, r2, #32
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	f002 021f 	and.w	r2, r2, #31
 80020b6:	2101      	movs	r1, #1
 80020b8:	fa01 f202 	lsl.w	r2, r1, r2
 80020bc:	4013      	ands	r3, r2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1ad      	bne.n	800201e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8110 	beq.w	80022f8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d079      	beq.n	80021dc <HAL_RCC_OscConfig+0x760>
 80020e8:	2301      	movs	r3, #1
 80020ea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80020fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fe:	fab3 f383 	clz	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	4bab      	ldr	r3, [pc, #684]	@ (80023b4 <HAL_RCC_OscConfig+0x938>)
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	461a      	mov	r2, r3
 800210e:	2301      	movs	r3, #1
 8002110:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002112:	f7fe fd5d 	bl	8000bd0 <HAL_GetTick>
 8002116:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211a:	e00a      	b.n	8002132 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800211c:	f7fe fd58 	bl	8000bd0 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d902      	bls.n	8002132 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	f000 bcdb 	b.w	8002ae8 <HAL_RCC_OscConfig+0x106c>
 8002132:	2302      	movs	r3, #2
 8002134:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002148:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800214c:	2202      	movs	r2, #2
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002154:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	fa93 f2a3 	rbit	r2, r3
 800215e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002162:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002170:	2202      	movs	r2, #2
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	fa93 f2a3 	rbit	r2, r3
 8002182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002186:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800218a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218c:	4b88      	ldr	r3, [pc, #544]	@ (80023b0 <HAL_RCC_OscConfig+0x934>)
 800218e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002194:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002198:	2102      	movs	r1, #2
 800219a:	6019      	str	r1, [r3, #0]
 800219c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	fa93 f1a3 	rbit	r1, r3
 80021aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021b2:	6019      	str	r1, [r3, #0]
  return result;
 80021b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	f003 031f 	and.w	r3, r3, #31
 80021ce:	2101      	movs	r1, #1
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0a0      	beq.n	800211c <HAL_RCC_OscConfig+0x6a0>
 80021da:	e08d      	b.n	80022f8 <HAL_RCC_OscConfig+0x87c>
 80021dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80021e4:	2201      	movs	r2, #1
 80021e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	fa93 f2a3 	rbit	r2, r3
 80021f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021fa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80021fe:	601a      	str	r2, [r3, #0]
  return result;
 8002200:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002204:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002208:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	4b68      	ldr	r3, [pc, #416]	@ (80023b4 <HAL_RCC_OscConfig+0x938>)
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	461a      	mov	r2, r3
 800221a:	2300      	movs	r3, #0
 800221c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221e:	f7fe fcd7 	bl	8000bd0 <HAL_GetTick>
 8002222:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002226:	e00a      	b.n	800223e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002228:	f7fe fcd2 	bl	8000bd0 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d902      	bls.n	800223e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	f000 bc55 	b.w	8002ae8 <HAL_RCC_OscConfig+0x106c>
 800223e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002242:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002246:	2202      	movs	r2, #2
 8002248:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	fa93 f2a3 	rbit	r2, r3
 8002258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002266:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800226a:	2202      	movs	r2, #2
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002272:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	fa93 f2a3 	rbit	r2, r3
 800227c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002280:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800228e:	2202      	movs	r2, #2
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002296:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	fa93 f2a3 	rbit	r2, r3
 80022a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80022a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022aa:	4b41      	ldr	r3, [pc, #260]	@ (80023b0 <HAL_RCC_OscConfig+0x934>)
 80022ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80022b6:	2102      	movs	r1, #2
 80022b8:	6019      	str	r1, [r3, #0]
 80022ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022be:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	fa93 f1a3 	rbit	r1, r3
 80022c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80022d0:	6019      	str	r1, [r3, #0]
  return result;
 80022d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	fab3 f383 	clz	r3, r3
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	2101      	movs	r1, #1
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d197      	bne.n	8002228 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 81a1 	beq.w	8002650 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002314:	4b26      	ldr	r3, [pc, #152]	@ (80023b0 <HAL_RCC_OscConfig+0x934>)
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d116      	bne.n	800234e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002320:	4b23      	ldr	r3, [pc, #140]	@ (80023b0 <HAL_RCC_OscConfig+0x934>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	4a22      	ldr	r2, [pc, #136]	@ (80023b0 <HAL_RCC_OscConfig+0x934>)
 8002326:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800232a:	61d3      	str	r3, [r2, #28]
 800232c:	4b20      	ldr	r3, [pc, #128]	@ (80023b0 <HAL_RCC_OscConfig+0x934>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002338:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002342:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002346:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002348:	2301      	movs	r3, #1
 800234a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234e:	4b1a      	ldr	r3, [pc, #104]	@ (80023b8 <HAL_RCC_OscConfig+0x93c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d11a      	bne.n	8002390 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235a:	4b17      	ldr	r3, [pc, #92]	@ (80023b8 <HAL_RCC_OscConfig+0x93c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a16      	ldr	r2, [pc, #88]	@ (80023b8 <HAL_RCC_OscConfig+0x93c>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002364:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002366:	f7fe fc33 	bl	8000bd0 <HAL_GetTick>
 800236a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236e:	e009      	b.n	8002384 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002370:	f7fe fc2e 	bl	8000bd0 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b64      	cmp	r3, #100	@ 0x64
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e3b1      	b.n	8002ae8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002384:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <HAL_RCC_OscConfig+0x93c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ef      	beq.n	8002370 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002394:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d10d      	bne.n	80023bc <HAL_RCC_OscConfig+0x940>
 80023a0:	4b03      	ldr	r3, [pc, #12]	@ (80023b0 <HAL_RCC_OscConfig+0x934>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4a02      	ldr	r2, [pc, #8]	@ (80023b0 <HAL_RCC_OscConfig+0x934>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6213      	str	r3, [r2, #32]
 80023ac:	e03c      	b.n	8002428 <HAL_RCC_OscConfig+0x9ac>
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
 80023b4:	10908120 	.word	0x10908120
 80023b8:	40007000 	.word	0x40007000
 80023bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10c      	bne.n	80023e6 <HAL_RCC_OscConfig+0x96a>
 80023cc:	4bc1      	ldr	r3, [pc, #772]	@ (80026d4 <HAL_RCC_OscConfig+0xc58>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	4ac0      	ldr	r2, [pc, #768]	@ (80026d4 <HAL_RCC_OscConfig+0xc58>)
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	6213      	str	r3, [r2, #32]
 80023d8:	4bbe      	ldr	r3, [pc, #760]	@ (80026d4 <HAL_RCC_OscConfig+0xc58>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4abd      	ldr	r2, [pc, #756]	@ (80026d4 <HAL_RCC_OscConfig+0xc58>)
 80023de:	f023 0304 	bic.w	r3, r3, #4
 80023e2:	6213      	str	r3, [r2, #32]
 80023e4:	e020      	b.n	8002428 <HAL_RCC_OscConfig+0x9ac>
 80023e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b05      	cmp	r3, #5
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0x994>
 80023f6:	4bb7      	ldr	r3, [pc, #732]	@ (80026d4 <HAL_RCC_OscConfig+0xc58>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4ab6      	ldr	r2, [pc, #728]	@ (80026d4 <HAL_RCC_OscConfig+0xc58>)
 80023fc:	f043 0304 	orr.w	r3, r3, #4
 8002400:	6213      	str	r3, [r2, #32]
 8002402:	4bb4      	ldr	r3, [pc, #720]	@ (80026d4 <HAL_RCC_OscConfig+0xc58>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4ab3      	ldr	r2, [pc, #716]	@ (80026d4 <HAL_RCC_OscConfig+0xc58>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6213      	str	r3, [r2, #32]
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0x9ac>
 8002410:	4bb0      	ldr	r3, [pc, #704]	@ (80026d4 <HAL_RCC_OscConfig+0xc58>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4aaf      	ldr	r2, [pc, #700]	@ (80026d4 <HAL_RCC_OscConfig+0xc58>)
 8002416:	f023 0301 	bic.w	r3, r3, #1
 800241a:	6213      	str	r3, [r2, #32]
 800241c:	4bad      	ldr	r3, [pc, #692]	@ (80026d4 <HAL_RCC_OscConfig+0xc58>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4aac      	ldr	r2, [pc, #688]	@ (80026d4 <HAL_RCC_OscConfig+0xc58>)
 8002422:	f023 0304 	bic.w	r3, r3, #4
 8002426:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 8081 	beq.w	800253c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243a:	f7fe fbc9 	bl	8000bd0 <HAL_GetTick>
 800243e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002442:	e00b      	b.n	800245c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002444:	f7fe fbc4 	bl	8000bd0 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002454:	4293      	cmp	r3, r2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e345      	b.n	8002ae8 <HAL_RCC_OscConfig+0x106c>
 800245c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002460:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002464:	2202      	movs	r2, #2
 8002466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	fa93 f2a3 	rbit	r2, r3
 8002476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002484:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002488:	2202      	movs	r2, #2
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002490:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	fa93 f2a3 	rbit	r2, r3
 800249a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80024a2:	601a      	str	r2, [r3, #0]
  return result;
 80024a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80024ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d102      	bne.n	80024c8 <HAL_RCC_OscConfig+0xa4c>
 80024c2:	4b84      	ldr	r3, [pc, #528]	@ (80026d4 <HAL_RCC_OscConfig+0xc58>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	e013      	b.n	80024f0 <HAL_RCC_OscConfig+0xa74>
 80024c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024cc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80024d0:	2202      	movs	r2, #2
 80024d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	fa93 f2a3 	rbit	r2, r3
 80024e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	4b79      	ldr	r3, [pc, #484]	@ (80026d4 <HAL_RCC_OscConfig+0xc58>)
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024f4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80024f8:	2102      	movs	r1, #2
 80024fa:	6011      	str	r1, [r2, #0]
 80024fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002500:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	fa92 f1a2 	rbit	r1, r2
 800250a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800250e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002512:	6011      	str	r1, [r2, #0]
  return result;
 8002514:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002518:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	fab2 f282 	clz	r2, r2
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	f002 021f 	and.w	r2, r2, #31
 800252e:	2101      	movs	r1, #1
 8002530:	fa01 f202 	lsl.w	r2, r1, r2
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d084      	beq.n	8002444 <HAL_RCC_OscConfig+0x9c8>
 800253a:	e07f      	b.n	800263c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253c:	f7fe fb48 	bl	8000bd0 <HAL_GetTick>
 8002540:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002544:	e00b      	b.n	800255e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002546:	f7fe fb43 	bl	8000bd0 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e2c4      	b.n	8002ae8 <HAL_RCC_OscConfig+0x106c>
 800255e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002562:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002566:	2202      	movs	r2, #2
 8002568:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	fa93 f2a3 	rbit	r2, r3
 8002578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002586:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800258a:	2202      	movs	r2, #2
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002592:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	fa93 f2a3 	rbit	r2, r3
 800259c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80025a4:	601a      	str	r2, [r3, #0]
  return result;
 80025a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025aa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80025ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b0:	fab3 f383 	clz	r3, r3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	f043 0302 	orr.w	r3, r3, #2
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d102      	bne.n	80025ca <HAL_RCC_OscConfig+0xb4e>
 80025c4:	4b43      	ldr	r3, [pc, #268]	@ (80026d4 <HAL_RCC_OscConfig+0xc58>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	e013      	b.n	80025f2 <HAL_RCC_OscConfig+0xb76>
 80025ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ce:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80025d2:	2202      	movs	r2, #2
 80025d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025da:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	fa93 f2a3 	rbit	r2, r3
 80025e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	4b39      	ldr	r3, [pc, #228]	@ (80026d4 <HAL_RCC_OscConfig+0xc58>)
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025f6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80025fa:	2102      	movs	r1, #2
 80025fc:	6011      	str	r1, [r2, #0]
 80025fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002602:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	fa92 f1a2 	rbit	r1, r2
 800260c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002610:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002614:	6011      	str	r1, [r2, #0]
  return result;
 8002616:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800261a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	fab2 f282 	clz	r2, r2
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	f002 021f 	and.w	r2, r2, #31
 8002630:	2101      	movs	r1, #1
 8002632:	fa01 f202 	lsl.w	r2, r1, r2
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d184      	bne.n	8002546 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800263c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002640:	2b01      	cmp	r3, #1
 8002642:	d105      	bne.n	8002650 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002644:	4b23      	ldr	r3, [pc, #140]	@ (80026d4 <HAL_RCC_OscConfig+0xc58>)
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	4a22      	ldr	r2, [pc, #136]	@ (80026d4 <HAL_RCC_OscConfig+0xc58>)
 800264a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800264e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002654:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8242 	beq.w	8002ae6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002662:	4b1c      	ldr	r3, [pc, #112]	@ (80026d4 <HAL_RCC_OscConfig+0xc58>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b08      	cmp	r3, #8
 800266c:	f000 8213 	beq.w	8002a96 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002674:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	2b02      	cmp	r3, #2
 800267e:	f040 8162 	bne.w	8002946 <HAL_RCC_OscConfig+0xeca>
 8002682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002686:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800268a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800268e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002694:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	fa93 f2a3 	rbit	r2, r3
 800269e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80026a6:	601a      	str	r2, [r3, #0]
  return result;
 80026a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ac:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80026b0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	461a      	mov	r2, r3
 80026c4:	2300      	movs	r3, #0
 80026c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7fe fa82 	bl	8000bd0 <HAL_GetTick>
 80026cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d0:	e00c      	b.n	80026ec <HAL_RCC_OscConfig+0xc70>
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d8:	f7fe fa7a 	bl	8000bd0 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e1fd      	b.n	8002ae8 <HAL_RCC_OscConfig+0x106c>
 80026ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80026f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fe:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	fa93 f2a3 	rbit	r2, r3
 8002708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002710:	601a      	str	r2, [r3, #0]
  return result;
 8002712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002716:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800271a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271c:	fab3 f383 	clz	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d102      	bne.n	8002736 <HAL_RCC_OscConfig+0xcba>
 8002730:	4bb0      	ldr	r3, [pc, #704]	@ (80029f4 <HAL_RCC_OscConfig+0xf78>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	e027      	b.n	8002786 <HAL_RCC_OscConfig+0xd0a>
 8002736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800273e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002742:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002748:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	fa93 f2a3 	rbit	r2, r3
 8002752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002756:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002760:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002764:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	fa93 f2a3 	rbit	r2, r3
 8002778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	4b9c      	ldr	r3, [pc, #624]	@ (80029f4 <HAL_RCC_OscConfig+0xf78>)
 8002784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002786:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800278a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800278e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002792:	6011      	str	r1, [r2, #0]
 8002794:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002798:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	fa92 f1a2 	rbit	r1, r2
 80027a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027a6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80027aa:	6011      	str	r1, [r2, #0]
  return result;
 80027ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027b0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	fab2 f282 	clz	r2, r2
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	f042 0220 	orr.w	r2, r2, #32
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	f002 021f 	and.w	r2, r2, #31
 80027c6:	2101      	movs	r1, #1
 80027c8:	fa01 f202 	lsl.w	r2, r1, r2
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d182      	bne.n	80026d8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d2:	4b88      	ldr	r3, [pc, #544]	@ (80029f4 <HAL_RCC_OscConfig+0xf78>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80027da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80027e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	430b      	orrs	r3, r1
 80027f4:	497f      	ldr	r1, [pc, #508]	@ (80029f4 <HAL_RCC_OscConfig+0xf78>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	604b      	str	r3, [r1, #4]
 80027fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fe:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002802:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002806:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	fa93 f2a3 	rbit	r2, r3
 8002816:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800281a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800281e:	601a      	str	r2, [r3, #0]
  return result;
 8002820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002824:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002828:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002834:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	461a      	mov	r2, r3
 800283c:	2301      	movs	r3, #1
 800283e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7fe f9c6 	bl	8000bd0 <HAL_GetTick>
 8002844:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002848:	e009      	b.n	800285e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800284a:	f7fe f9c1 	bl	8000bd0 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e144      	b.n	8002ae8 <HAL_RCC_OscConfig+0x106c>
 800285e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002862:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002866:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800286a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002870:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	fa93 f2a3 	rbit	r2, r3
 800287a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800287e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002882:	601a      	str	r2, [r3, #0]
  return result;
 8002884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002888:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800288c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d102      	bne.n	80028a8 <HAL_RCC_OscConfig+0xe2c>
 80028a2:	4b54      	ldr	r3, [pc, #336]	@ (80029f4 <HAL_RCC_OscConfig+0xf78>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	e027      	b.n	80028f8 <HAL_RCC_OscConfig+0xe7c>
 80028a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ac:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80028b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ba:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	fa93 f2a3 	rbit	r2, r3
 80028c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80028d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	fa93 f2a3 	rbit	r2, r3
 80028ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ee:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	4b3f      	ldr	r3, [pc, #252]	@ (80029f4 <HAL_RCC_OscConfig+0xf78>)
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028fc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002900:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002904:	6011      	str	r1, [r2, #0]
 8002906:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800290a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	fa92 f1a2 	rbit	r1, r2
 8002914:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002918:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800291c:	6011      	str	r1, [r2, #0]
  return result;
 800291e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002922:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	fab2 f282 	clz	r2, r2
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	f042 0220 	orr.w	r2, r2, #32
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	f002 021f 	and.w	r2, r2, #31
 8002938:	2101      	movs	r1, #1
 800293a:	fa01 f202 	lsl.w	r2, r1, r2
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d082      	beq.n	800284a <HAL_RCC_OscConfig+0xdce>
 8002944:	e0cf      	b.n	8002ae6 <HAL_RCC_OscConfig+0x106a>
 8002946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800294e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002958:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	fa93 f2a3 	rbit	r2, r3
 8002962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002966:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800296a:	601a      	str	r2, [r3, #0]
  return result;
 800296c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002970:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002974:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002980:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	461a      	mov	r2, r3
 8002988:	2300      	movs	r3, #0
 800298a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe f920 	bl	8000bd0 <HAL_GetTick>
 8002990:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002994:	e009      	b.n	80029aa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002996:	f7fe f91b 	bl	8000bd0 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e09e      	b.n	8002ae8 <HAL_RCC_OscConfig+0x106c>
 80029aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ae:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80029b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029bc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	fa93 f2a3 	rbit	r2, r3
 80029c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ca:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80029ce:	601a      	str	r2, [r3, #0]
  return result;
 80029d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80029d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d104      	bne.n	80029f8 <HAL_RCC_OscConfig+0xf7c>
 80029ee:	4b01      	ldr	r3, [pc, #4]	@ (80029f4 <HAL_RCC_OscConfig+0xf78>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	e029      	b.n	8002a48 <HAL_RCC_OscConfig+0xfcc>
 80029f4:	40021000 	.word	0x40021000
 80029f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	fa93 f2a3 	rbit	r2, r3
 8002a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a18:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a22:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a30:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	fa93 f2a3 	rbit	r2, r3
 8002a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	4b2b      	ldr	r3, [pc, #172]	@ (8002af4 <HAL_RCC_OscConfig+0x1078>)
 8002a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a4c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a50:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a54:	6011      	str	r1, [r2, #0]
 8002a56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a5a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	fa92 f1a2 	rbit	r1, r2
 8002a64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a68:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a6c:	6011      	str	r1, [r2, #0]
  return result;
 8002a6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a72:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	fab2 f282 	clz	r2, r2
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	f042 0220 	orr.w	r2, r2, #32
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	f002 021f 	and.w	r2, r2, #31
 8002a88:	2101      	movs	r1, #1
 8002a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d180      	bne.n	8002996 <HAL_RCC_OscConfig+0xf1a>
 8002a94:	e027      	b.n	8002ae6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e01e      	b.n	8002ae8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002aaa:	4b12      	ldr	r3, [pc, #72]	@ (8002af4 <HAL_RCC_OscConfig+0x1078>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ab2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002ab6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002abe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d10b      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002aca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002ace:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d001      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000

08002af8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b09e      	sub	sp, #120	@ 0x78
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e162      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b10:	4b90      	ldr	r3, [pc, #576]	@ (8002d54 <HAL_RCC_ClockConfig+0x25c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d910      	bls.n	8002b40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b8d      	ldr	r3, [pc, #564]	@ (8002d54 <HAL_RCC_ClockConfig+0x25c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 0207 	bic.w	r2, r3, #7
 8002b26:	498b      	ldr	r1, [pc, #556]	@ (8002d54 <HAL_RCC_ClockConfig+0x25c>)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b89      	ldr	r3, [pc, #548]	@ (8002d54 <HAL_RCC_ClockConfig+0x25c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e14a      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b4c:	4b82      	ldr	r3, [pc, #520]	@ (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	497f      	ldr	r1, [pc, #508]	@ (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80dc 	beq.w	8002d24 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d13c      	bne.n	8002bee <HAL_RCC_ClockConfig+0xf6>
 8002b74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b78:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002b82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b84:	fab3 f383 	clz	r3, r3
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d102      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xa6>
 8002b98:	4b6f      	ldr	r3, [pc, #444]	@ (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	e00f      	b.n	8002bbe <HAL_RCC_ClockConfig+0xc6>
 8002b9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ba2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bb4:	fa93 f3a3 	rbit	r3, r3
 8002bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bba:	4b67      	ldr	r3, [pc, #412]	@ (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bc2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002bc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002bc6:	fa92 f2a2 	rbit	r2, r2
 8002bca:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002bcc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002bce:	fab2 f282 	clz	r2, r2
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	f042 0220 	orr.w	r2, r2, #32
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	f002 021f 	and.w	r2, r2, #31
 8002bde:	2101      	movs	r1, #1
 8002be0:	fa01 f202 	lsl.w	r2, r1, r2
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d17b      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0f3      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d13c      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x178>
 8002bf6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bfa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d102      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x128>
 8002c1a:	4b4f      	ldr	r3, [pc, #316]	@ (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	e00f      	b.n	8002c40 <HAL_RCC_ClockConfig+0x148>
 8002c20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c24:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c32:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c3c:	4b46      	ldr	r3, [pc, #280]	@ (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c44:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002c46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c48:	fa92 f2a2 	rbit	r2, r2
 8002c4c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002c4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c50:	fab2 f282 	clz	r2, r2
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	f042 0220 	orr.w	r2, r2, #32
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	f002 021f 	and.w	r2, r2, #31
 8002c60:	2101      	movs	r1, #1
 8002c62:	fa01 f202 	lsl.w	r2, r1, r2
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d13a      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0b2      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x2de>
 8002c70:	2302      	movs	r3, #2
 8002c72:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d102      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x1a0>
 8002c92:	4b31      	ldr	r3, [pc, #196]	@ (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	e00d      	b.n	8002cb4 <HAL_RCC_ClockConfig+0x1bc>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	623b      	str	r3, [r7, #32]
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	61fb      	str	r3, [r7, #28]
 8002cb0:	4b29      	ldr	r3, [pc, #164]	@ (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	61ba      	str	r2, [r7, #24]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	fa92 f2a2 	rbit	r2, r2
 8002cbe:	617a      	str	r2, [r7, #20]
  return result;
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	fab2 f282 	clz	r2, r2
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	f042 0220 	orr.w	r2, r2, #32
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	f002 021f 	and.w	r2, r2, #31
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e079      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f023 0203 	bic.w	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	491a      	ldr	r1, [pc, #104]	@ (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf4:	f7fd ff6c 	bl	8000bd0 <HAL_GetTick>
 8002cf8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfc:	f7fd ff68 	bl	8000bd0 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e061      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d12:	4b11      	ldr	r3, [pc, #68]	@ (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 020c 	and.w	r2, r3, #12
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d1eb      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d24:	4b0b      	ldr	r3, [pc, #44]	@ (8002d54 <HAL_RCC_ClockConfig+0x25c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d214      	bcs.n	8002d5c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b08      	ldr	r3, [pc, #32]	@ (8002d54 <HAL_RCC_ClockConfig+0x25c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 0207 	bic.w	r2, r3, #7
 8002d3a:	4906      	ldr	r1, [pc, #24]	@ (8002d54 <HAL_RCC_ClockConfig+0x25c>)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b04      	ldr	r3, [pc, #16]	@ (8002d54 <HAL_RCC_ClockConfig+0x25c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e040      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x2de>
 8002d54:	40022000 	.word	0x40022000
 8002d58:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d68:	4b1d      	ldr	r3, [pc, #116]	@ (8002de0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	491a      	ldr	r1, [pc, #104]	@ (8002de0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d009      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d86:	4b16      	ldr	r3, [pc, #88]	@ (8002de0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4912      	ldr	r1, [pc, #72]	@ (8002de0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d9a:	f000 f829 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8002d9e:	4601      	mov	r1, r0
 8002da0:	4b0f      	ldr	r3, [pc, #60]	@ (8002de0 <HAL_RCC_ClockConfig+0x2e8>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002da8:	22f0      	movs	r2, #240	@ 0xf0
 8002daa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	fa92 f2a2 	rbit	r2, r2
 8002db2:	60fa      	str	r2, [r7, #12]
  return result;
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	fab2 f282 	clz	r2, r2
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	40d3      	lsrs	r3, r2
 8002dbe:	4a09      	ldr	r2, [pc, #36]	@ (8002de4 <HAL_RCC_ClockConfig+0x2ec>)
 8002dc0:	5cd3      	ldrb	r3, [r2, r3]
 8002dc2:	fa21 f303 	lsr.w	r3, r1, r3
 8002dc6:	4a08      	ldr	r2, [pc, #32]	@ (8002de8 <HAL_RCC_ClockConfig+0x2f0>)
 8002dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002dca:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <HAL_RCC_ClockConfig+0x2f4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd feba 	bl	8000b48 <HAL_InitTick>
  
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3778      	adds	r7, #120	@ 0x78
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000
 8002de4:	08003a18 	.word	0x08003a18
 8002de8:	20000000 	.word	0x20000000
 8002dec:	20000004 	.word	0x20000004

08002df0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	2300      	movs	r3, #0
 8002e04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d002      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x30>
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d003      	beq.n	8002e26 <HAL_RCC_GetSysClockFreq+0x36>
 8002e1e:	e026      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e20:	4b19      	ldr	r3, [pc, #100]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e22:	613b      	str	r3, [r7, #16]
      break;
 8002e24:	e026      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	0c9b      	lsrs	r3, r3, #18
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	4a17      	ldr	r2, [pc, #92]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e30:	5cd3      	ldrb	r3, [r2, r3]
 8002e32:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002e34:	4b13      	ldr	r3, [pc, #76]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	4a14      	ldr	r2, [pc, #80]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e3e:	5cd3      	ldrb	r3, [r2, r3]
 8002e40:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e4c:	4a0e      	ldr	r2, [pc, #56]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	fb02 f303 	mul.w	r3, r2, r3
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	e004      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a0c      	ldr	r2, [pc, #48]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e62:	fb02 f303 	mul.w	r3, r2, r3
 8002e66:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	613b      	str	r3, [r7, #16]
      break;
 8002e6c:	e002      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e6e:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e70:	613b      	str	r3, [r7, #16]
      break;
 8002e72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e74:	693b      	ldr	r3, [r7, #16]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	007a1200 	.word	0x007a1200
 8002e8c:	08004c0c 	.word	0x08004c0c
 8002e90:	08004c1c 	.word	0x08004c1c
 8002e94:	003d0900 	.word	0x003d0900

08002e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	@ (8002eac <HAL_RCC_GetHCLKFreq+0x14>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000000 	.word	0x20000000

08002eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002eb6:	f7ff ffef 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002eba:	4601      	mov	r1, r0
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ec4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002ec8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	fa92 f2a2 	rbit	r2, r2
 8002ed0:	603a      	str	r2, [r7, #0]
  return result;
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	fab2 f282 	clz	r2, r2
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	40d3      	lsrs	r3, r2
 8002edc:	4a04      	ldr	r2, [pc, #16]	@ (8002ef0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ede:	5cd3      	ldrb	r3, [r2, r3]
 8002ee0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	08003a28 	.word	0x08003a28

08002ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002efa:	f7ff ffcd 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002efe:	4601      	mov	r1, r0
 8002f00:	4b0b      	ldr	r3, [pc, #44]	@ (8002f30 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002f08:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002f0c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	fa92 f2a2 	rbit	r2, r2
 8002f14:	603a      	str	r2, [r7, #0]
  return result;
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	fab2 f282 	clz	r2, r2
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	40d3      	lsrs	r3, r2
 8002f20:	4a04      	ldr	r2, [pc, #16]	@ (8002f34 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f22:	5cd3      	ldrb	r3, [r2, r3]
 8002f24:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000
 8002f34:	08003a28 	.word	0x08003a28

08002f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b092      	sub	sp, #72	@ 0x48
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80d4 	beq.w	8003104 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5c:	4b4e      	ldr	r3, [pc, #312]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10e      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f68:	4b4b      	ldr	r3, [pc, #300]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	4a4a      	ldr	r2, [pc, #296]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f72:	61d3      	str	r3, [r2, #28]
 8002f74:	4b48      	ldr	r3, [pc, #288]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f86:	4b45      	ldr	r3, [pc, #276]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d118      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f92:	4b42      	ldr	r3, [pc, #264]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a41      	ldr	r2, [pc, #260]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9e:	f7fd fe17 	bl	8000bd0 <HAL_GetTick>
 8002fa2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa6:	f7fd fe13 	bl	8000bd0 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b64      	cmp	r3, #100	@ 0x64
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e14b      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	4b38      	ldr	r3, [pc, #224]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fc4:	4b34      	ldr	r3, [pc, #208]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 8084 	beq.w	80030de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fde:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d07c      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fe4:	4b2c      	ldr	r3, [pc, #176]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ff2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	4b26      	ldr	r3, [pc, #152]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	461a      	mov	r2, r3
 800300e:	2301      	movs	r3, #1
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003016:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	4b1d      	ldr	r3, [pc, #116]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	461a      	mov	r2, r3
 8003032:	2300      	movs	r3, #0
 8003034:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003036:	4a18      	ldr	r2, [pc, #96]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800303a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800303c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d04b      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003046:	f7fd fdc3 	bl	8000bd0 <HAL_GetTick>
 800304a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304c:	e00a      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304e:	f7fd fdbf 	bl	8000bd0 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305c:	4293      	cmp	r3, r2
 800305e:	d901      	bls.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e0f5      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003064:	2302      	movs	r3, #2
 8003066:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306a:	fa93 f3a3 	rbit	r3, r3
 800306e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003070:	2302      	movs	r3, #2
 8003072:	623b      	str	r3, [r7, #32]
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	61fb      	str	r3, [r7, #28]
  return result;
 800307c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	095b      	lsrs	r3, r3, #5
 8003086:	b2db      	uxtb	r3, r3
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d108      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003092:	4b01      	ldr	r3, [pc, #4]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	e00d      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003098:	40021000 	.word	0x40021000
 800309c:	40007000 	.word	0x40007000
 80030a0:	10908100 	.word	0x10908100
 80030a4:	2302      	movs	r3, #2
 80030a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	4b69      	ldr	r3, [pc, #420]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	2202      	movs	r2, #2
 80030b6:	613a      	str	r2, [r7, #16]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	fa92 f2a2 	rbit	r2, r2
 80030be:	60fa      	str	r2, [r7, #12]
  return result;
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	fab2 f282 	clz	r2, r2
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	f002 021f 	and.w	r2, r2, #31
 80030d2:	2101      	movs	r1, #1
 80030d4:	fa01 f202 	lsl.w	r2, r1, r2
 80030d8:	4013      	ands	r3, r2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0b7      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80030de:	4b5e      	ldr	r3, [pc, #376]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	495b      	ldr	r1, [pc, #364]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f8:	4b57      	ldr	r3, [pc, #348]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	4a56      	ldr	r2, [pc, #344]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003102:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003110:	4b51      	ldr	r3, [pc, #324]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003114:	f023 0203 	bic.w	r2, r3, #3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	494e      	ldr	r1, [pc, #312]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800311e:	4313      	orrs	r3, r2
 8003120:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800312e:	4b4a      	ldr	r3, [pc, #296]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	f023 0210 	bic.w	r2, r3, #16
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	4947      	ldr	r1, [pc, #284]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800313c:	4313      	orrs	r3, r2
 800313e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800314c:	4b42      	ldr	r3, [pc, #264]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003158:	493f      	ldr	r1, [pc, #252]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800316a:	4b3b      	ldr	r3, [pc, #236]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316e:	f023 0220 	bic.w	r2, r3, #32
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	4938      	ldr	r1, [pc, #224]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003178:	4313      	orrs	r3, r2
 800317a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003188:	4b33      	ldr	r3, [pc, #204]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800318a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	4930      	ldr	r1, [pc, #192]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003196:	4313      	orrs	r3, r2
 8003198:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	4929      	ldr	r1, [pc, #164]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80031c4:	4b24      	ldr	r3, [pc, #144]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c8:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	4921      	ldr	r1, [pc, #132]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d008      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80031e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	491a      	ldr	r1, [pc, #104]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003200:	4b15      	ldr	r3, [pc, #84]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003204:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320c:	4912      	ldr	r1, [pc, #72]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800320e:	4313      	orrs	r3, r2
 8003210:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d008      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800321e:	4b0e      	ldr	r3, [pc, #56]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322a:	490b      	ldr	r1, [pc, #44]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800322c:	4313      	orrs	r3, r2
 800322e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800323c:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003240:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003248:	4903      	ldr	r1, [pc, #12]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800324a:	4313      	orrs	r3, r2
 800324c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3748      	adds	r7, #72	@ 0x48
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40021000 	.word	0x40021000

0800325c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e040      	b.n	80032f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fd f968 	bl	8000554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2224      	movs	r2, #36	@ 0x24
 8003288:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0201 	bic.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f95e 	bl	8003564 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f825 	bl	80032f8 <UART_SetConfig>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e01b      	b.n	80032f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f9dd 	bl	80036a8 <UART_CheckIdleState>
 80032ee:	4603      	mov	r3, r0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4b8a      	ldr	r3, [pc, #552]	@ (800354c <UART_SetConfig+0x254>)
 8003324:	4013      	ands	r3, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	6979      	ldr	r1, [r7, #20]
 800332c:	430b      	orrs	r3, r1
 800332e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	430a      	orrs	r2, r1
 8003368:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a78      	ldr	r2, [pc, #480]	@ (8003550 <UART_SetConfig+0x258>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d120      	bne.n	80033b6 <UART_SetConfig+0xbe>
 8003374:	4b77      	ldr	r3, [pc, #476]	@ (8003554 <UART_SetConfig+0x25c>)
 8003376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	2b03      	cmp	r3, #3
 800337e:	d817      	bhi.n	80033b0 <UART_SetConfig+0xb8>
 8003380:	a201      	add	r2, pc, #4	@ (adr r2, 8003388 <UART_SetConfig+0x90>)
 8003382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003386:	bf00      	nop
 8003388:	08003399 	.word	0x08003399
 800338c:	080033a5 	.word	0x080033a5
 8003390:	080033ab 	.word	0x080033ab
 8003394:	0800339f 	.word	0x0800339f
 8003398:	2300      	movs	r3, #0
 800339a:	77fb      	strb	r3, [r7, #31]
 800339c:	e01d      	b.n	80033da <UART_SetConfig+0xe2>
 800339e:	2302      	movs	r3, #2
 80033a0:	77fb      	strb	r3, [r7, #31]
 80033a2:	e01a      	b.n	80033da <UART_SetConfig+0xe2>
 80033a4:	2304      	movs	r3, #4
 80033a6:	77fb      	strb	r3, [r7, #31]
 80033a8:	e017      	b.n	80033da <UART_SetConfig+0xe2>
 80033aa:	2308      	movs	r3, #8
 80033ac:	77fb      	strb	r3, [r7, #31]
 80033ae:	e014      	b.n	80033da <UART_SetConfig+0xe2>
 80033b0:	2310      	movs	r3, #16
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e011      	b.n	80033da <UART_SetConfig+0xe2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a67      	ldr	r2, [pc, #412]	@ (8003558 <UART_SetConfig+0x260>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d102      	bne.n	80033c6 <UART_SetConfig+0xce>
 80033c0:	2300      	movs	r3, #0
 80033c2:	77fb      	strb	r3, [r7, #31]
 80033c4:	e009      	b.n	80033da <UART_SetConfig+0xe2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a64      	ldr	r2, [pc, #400]	@ (800355c <UART_SetConfig+0x264>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d102      	bne.n	80033d6 <UART_SetConfig+0xde>
 80033d0:	2300      	movs	r3, #0
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e001      	b.n	80033da <UART_SetConfig+0xe2>
 80033d6:	2310      	movs	r3, #16
 80033d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033e2:	d15a      	bne.n	800349a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80033e4:	7ffb      	ldrb	r3, [r7, #31]
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d827      	bhi.n	800343a <UART_SetConfig+0x142>
 80033ea:	a201      	add	r2, pc, #4	@ (adr r2, 80033f0 <UART_SetConfig+0xf8>)
 80033ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f0:	08003415 	.word	0x08003415
 80033f4:	0800341d 	.word	0x0800341d
 80033f8:	08003425 	.word	0x08003425
 80033fc:	0800343b 	.word	0x0800343b
 8003400:	0800342b 	.word	0x0800342b
 8003404:	0800343b 	.word	0x0800343b
 8003408:	0800343b 	.word	0x0800343b
 800340c:	0800343b 	.word	0x0800343b
 8003410:	08003433 	.word	0x08003433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003414:	f7ff fd4c 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8003418:	61b8      	str	r0, [r7, #24]
        break;
 800341a:	e013      	b.n	8003444 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800341c:	f7ff fd6a 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 8003420:	61b8      	str	r0, [r7, #24]
        break;
 8003422:	e00f      	b.n	8003444 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003424:	4b4e      	ldr	r3, [pc, #312]	@ (8003560 <UART_SetConfig+0x268>)
 8003426:	61bb      	str	r3, [r7, #24]
        break;
 8003428:	e00c      	b.n	8003444 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800342a:	f7ff fce1 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 800342e:	61b8      	str	r0, [r7, #24]
        break;
 8003430:	e008      	b.n	8003444 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003436:	61bb      	str	r3, [r7, #24]
        break;
 8003438:	e004      	b.n	8003444 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	77bb      	strb	r3, [r7, #30]
        break;
 8003442:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d074      	beq.n	8003534 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	005a      	lsls	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	085b      	lsrs	r3, r3, #1
 8003454:	441a      	add	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	fbb2 f3f3 	udiv	r3, r2, r3
 800345e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	2b0f      	cmp	r3, #15
 8003464:	d916      	bls.n	8003494 <UART_SetConfig+0x19c>
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800346c:	d212      	bcs.n	8003494 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	b29b      	uxth	r3, r3
 8003472:	f023 030f 	bic.w	r3, r3, #15
 8003476:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	085b      	lsrs	r3, r3, #1
 800347c:	b29b      	uxth	r3, r3
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	b29a      	uxth	r2, r3
 8003484:	89fb      	ldrh	r3, [r7, #14]
 8003486:	4313      	orrs	r3, r2
 8003488:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	89fa      	ldrh	r2, [r7, #14]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	e04f      	b.n	8003534 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	77bb      	strb	r3, [r7, #30]
 8003498:	e04c      	b.n	8003534 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800349a:	7ffb      	ldrb	r3, [r7, #31]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d828      	bhi.n	80034f2 <UART_SetConfig+0x1fa>
 80034a0:	a201      	add	r2, pc, #4	@ (adr r2, 80034a8 <UART_SetConfig+0x1b0>)
 80034a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a6:	bf00      	nop
 80034a8:	080034cd 	.word	0x080034cd
 80034ac:	080034d5 	.word	0x080034d5
 80034b0:	080034dd 	.word	0x080034dd
 80034b4:	080034f3 	.word	0x080034f3
 80034b8:	080034e3 	.word	0x080034e3
 80034bc:	080034f3 	.word	0x080034f3
 80034c0:	080034f3 	.word	0x080034f3
 80034c4:	080034f3 	.word	0x080034f3
 80034c8:	080034eb 	.word	0x080034eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034cc:	f7ff fcf0 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 80034d0:	61b8      	str	r0, [r7, #24]
        break;
 80034d2:	e013      	b.n	80034fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034d4:	f7ff fd0e 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 80034d8:	61b8      	str	r0, [r7, #24]
        break;
 80034da:	e00f      	b.n	80034fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034dc:	4b20      	ldr	r3, [pc, #128]	@ (8003560 <UART_SetConfig+0x268>)
 80034de:	61bb      	str	r3, [r7, #24]
        break;
 80034e0:	e00c      	b.n	80034fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034e2:	f7ff fc85 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 80034e6:	61b8      	str	r0, [r7, #24]
        break;
 80034e8:	e008      	b.n	80034fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ee:	61bb      	str	r3, [r7, #24]
        break;
 80034f0:	e004      	b.n	80034fc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	77bb      	strb	r3, [r7, #30]
        break;
 80034fa:	bf00      	nop
    }

    if (pclk != 0U)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d018      	beq.n	8003534 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	085a      	lsrs	r2, r3, #1
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	441a      	add	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	fbb2 f3f3 	udiv	r3, r2, r3
 8003514:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	2b0f      	cmp	r3, #15
 800351a:	d909      	bls.n	8003530 <UART_SetConfig+0x238>
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003522:	d205      	bcs.n	8003530 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	b29a      	uxth	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	60da      	str	r2, [r3, #12]
 800352e:	e001      	b.n	8003534 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003540:	7fbb      	ldrb	r3, [r7, #30]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3720      	adds	r7, #32
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	efff69f3 	.word	0xefff69f3
 8003550:	40013800 	.word	0x40013800
 8003554:	40021000 	.word	0x40021000
 8003558:	40004400 	.word	0x40004400
 800355c:	40004800 	.word	0x40004800
 8003560:	007a1200 	.word	0x007a1200

08003564 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01a      	beq.n	800367a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003662:	d10a      	bne.n	800367a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
  }
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b098      	sub	sp, #96	@ 0x60
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036b8:	f7fd fa8a 	bl	8000bd0 <HAL_GetTick>
 80036bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d12e      	bne.n	800372a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d4:	2200      	movs	r2, #0
 80036d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f88c 	bl	80037f8 <UART_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d021      	beq.n	800372a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ee:	e853 3f00 	ldrex	r3, [r3]
 80036f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003704:	647b      	str	r3, [r7, #68]	@ 0x44
 8003706:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003708:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800370a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800370c:	e841 2300 	strex	r3, r2, [r1]
 8003710:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1e6      	bne.n	80036e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e062      	b.n	80037f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b04      	cmp	r3, #4
 8003736:	d149      	bne.n	80037cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003738:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003740:	2200      	movs	r2, #0
 8003742:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f856 	bl	80037f8 <UART_WaitOnFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d03c      	beq.n	80037cc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	623b      	str	r3, [r7, #32]
   return(result);
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003770:	633b      	str	r3, [r7, #48]	@ 0x30
 8003772:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800377e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e6      	bne.n	8003752 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3308      	adds	r3, #8
 800378a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	60fb      	str	r3, [r7, #12]
   return(result);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3308      	adds	r3, #8
 80037a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037a4:	61fa      	str	r2, [r7, #28]
 80037a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	69b9      	ldr	r1, [r7, #24]
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	617b      	str	r3, [r7, #20]
   return(result);
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e5      	bne.n	8003784 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e011      	b.n	80037f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3758      	adds	r7, #88	@ 0x58
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	4613      	mov	r3, r2
 8003806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003808:	e04f      	b.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003810:	d04b      	beq.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003812:	f7fd f9dd 	bl	8000bd0 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	429a      	cmp	r2, r3
 8003820:	d302      	bcc.n	8003828 <UART_WaitOnFlagUntilTimeout+0x30>
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e04e      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b00      	cmp	r3, #0
 8003838:	d037      	beq.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b80      	cmp	r3, #128	@ 0x80
 800383e:	d034      	beq.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b40      	cmp	r3, #64	@ 0x40
 8003844:	d031      	beq.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b08      	cmp	r3, #8
 8003852:	d110      	bne.n	8003876 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2208      	movs	r2, #8
 800385a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f838 	bl	80038d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2208      	movs	r2, #8
 8003866:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e029      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003880:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003884:	d111      	bne.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800388e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f81e 	bl	80038d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e00f      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69da      	ldr	r2, [r3, #28]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4013      	ands	r3, r2
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	bf0c      	ite	eq
 80038ba:	2301      	moveq	r3, #1
 80038bc:	2300      	movne	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d0a0      	beq.n	800380a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b095      	sub	sp, #84	@ 0x54
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80038fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e6      	bne.n	80038da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3308      	adds	r3, #8
 8003912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	e853 3f00 	ldrex	r3, [r3]
 800391a:	61fb      	str	r3, [r7, #28]
   return(result);
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3308      	adds	r3, #8
 800392a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800392c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800392e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003930:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003932:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003934:	e841 2300 	strex	r3, r2, [r1]
 8003938:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800393a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e5      	bne.n	800390c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003944:	2b01      	cmp	r3, #1
 8003946:	d118      	bne.n	800397a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	e853 3f00 	ldrex	r3, [r3]
 8003954:	60bb      	str	r3, [r7, #8]
   return(result);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f023 0310 	bic.w	r3, r3, #16
 800395c:	647b      	str	r3, [r7, #68]	@ 0x44
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003966:	61bb      	str	r3, [r7, #24]
 8003968:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	6979      	ldr	r1, [r7, #20]
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	e841 2300 	strex	r3, r2, [r1]
 8003972:	613b      	str	r3, [r7, #16]
   return(result);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1e6      	bne.n	8003948 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800398e:	bf00      	nop
 8003990:	3754      	adds	r7, #84	@ 0x54
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <memset>:
 800399a:	4402      	add	r2, r0
 800399c:	4603      	mov	r3, r0
 800399e:	4293      	cmp	r3, r2
 80039a0:	d100      	bne.n	80039a4 <memset+0xa>
 80039a2:	4770      	bx	lr
 80039a4:	f803 1b01 	strb.w	r1, [r3], #1
 80039a8:	e7f9      	b.n	800399e <memset+0x4>
	...

080039ac <__libc_init_array>:
 80039ac:	b570      	push	{r4, r5, r6, lr}
 80039ae:	4d0d      	ldr	r5, [pc, #52]	@ (80039e4 <__libc_init_array+0x38>)
 80039b0:	4c0d      	ldr	r4, [pc, #52]	@ (80039e8 <__libc_init_array+0x3c>)
 80039b2:	1b64      	subs	r4, r4, r5
 80039b4:	10a4      	asrs	r4, r4, #2
 80039b6:	2600      	movs	r6, #0
 80039b8:	42a6      	cmp	r6, r4
 80039ba:	d109      	bne.n	80039d0 <__libc_init_array+0x24>
 80039bc:	4d0b      	ldr	r5, [pc, #44]	@ (80039ec <__libc_init_array+0x40>)
 80039be:	4c0c      	ldr	r4, [pc, #48]	@ (80039f0 <__libc_init_array+0x44>)
 80039c0:	f000 f818 	bl	80039f4 <_init>
 80039c4:	1b64      	subs	r4, r4, r5
 80039c6:	10a4      	asrs	r4, r4, #2
 80039c8:	2600      	movs	r6, #0
 80039ca:	42a6      	cmp	r6, r4
 80039cc:	d105      	bne.n	80039da <__libc_init_array+0x2e>
 80039ce:	bd70      	pop	{r4, r5, r6, pc}
 80039d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d4:	4798      	blx	r3
 80039d6:	3601      	adds	r6, #1
 80039d8:	e7ee      	b.n	80039b8 <__libc_init_array+0xc>
 80039da:	f855 3b04 	ldr.w	r3, [r5], #4
 80039de:	4798      	blx	r3
 80039e0:	3601      	adds	r6, #1
 80039e2:	e7f2      	b.n	80039ca <__libc_init_array+0x1e>
 80039e4:	08004c2c 	.word	0x08004c2c
 80039e8:	08004c2c 	.word	0x08004c2c
 80039ec:	08004c2c 	.word	0x08004c2c
 80039f0:	08004c30 	.word	0x08004c30

080039f4 <_init>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	bf00      	nop
 80039f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fa:	bc08      	pop	{r3}
 80039fc:	469e      	mov	lr, r3
 80039fe:	4770      	bx	lr

08003a00 <_fini>:
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	bf00      	nop
 8003a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a06:	bc08      	pop	{r3}
 8003a08:	469e      	mov	lr, r3
 8003a0a:	4770      	bx	lr
